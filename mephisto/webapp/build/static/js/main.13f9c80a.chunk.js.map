{"version":3,"sources":["widgets/Base.tsx","lib/Async.ts","widgets/components/RequesterTypeSelect.tsx","axios.ts","service.ts","widgets/components/RequesterForm.tsx","widgets/Prepare.tsx","utils.ts","widgets/TaskRunSummary.tsx","widgets/components/FormField.tsx","widgets/components/OptionsForm.tsx","widgets/components/BlueprintSelect.tsx","widgets/components/ArchitectSelect.tsx","widgets/components/RequesterSelect.tsx","lib/toaster.ts","widgets/Launch.tsx","widgets/Review.tsx","App.tsx","index.tsx"],"names":["children","heading","badge","elevation","Elevation","THREE","className","style","marginBottom","undefined","isEmpty","require","createAsync","Async","info","onLoading","onError","onData","onEmptyData","checkIfEmptyFn","data","loading","error","baseProps","refetch","axiosInfo","response","dataToCheckIfEmpty","RequesterTypeSelect","Select","ofType","renderRequesterTypeItem","requesterType","handleClick","modifiers","query","matchesPredicate","text","active","disabled","key","onClick","highlightText","RequesterTypeSelectComponent","onUpdate","React","useState","selected","setSelected","items","itemRenderer","onItemSelect","activeItem","icon","rightIcon","escapeRegExpChars","replace","lastIndex","words","split","filter","word","length","map","regexp","RegExp","join","tokens","match","exec","before","slice","push","rest","axios","Axios","create","baseURL","interceptors","request","use","config","delayed","Promise","resolve","setTimeout","configure","SKIP_FIELD","launchTask","transformedPayload","transformed","Object","entries","value","option_string","namespace","arg_name","opt_string","toString","arg","console","table","fromEntries","mapDataToExpectedPayload","post","RequesterTypeParamsAsync","LaunchOptionsAsync","RequesterForm","onFinish","requesterTypes","requester_types","r","selectedRequesterType","setSelectedRequesterType","requesterTypesAsync","useAxios","url","margin","log","details","desc","initialValues","onSubmit","values","provider","payload","results","args","param","handleChange","errors","touched","handleBlur","handleSubmit","isSubmitting","label","help","labelInfo","labelFor","id","placeholder","name","onBlur","onChange","RequesterFormWithData","allRequestersAsync","plural","numInstalledTasks","requesterDrawerOpen","setRequesterDrawerOpen","requesterAsync","Base","color","Colors","RED3","requesters","ORANGE3","onClose","title","autoFocus","canEscapeKeyClose","enforceFocus","hasBackdrop","isOpen","position","Position","BOTTOM","size","usePortal","Classes","DRAWER_BODY","backgroundColor","LIGHT_GRAY4","DIALOG_BODY","requester_id","interactive","registered","GREEN4","GRAY4","provider_type","display","marginRight","cx","requester_name","marginTop","window","location","reload","TaskRunSummary","run","LIGHT_GRAY5","padding","borderColor","GRAY5","borderWidth","borderStyle","borderRadius","task_name","moment","utc","start_time","fromNow","params","fontSize","task_status","created","launched","completed","accepted","mixed","rejected","assigned","FormField","prefix","field","dest","dispatch","useEffect","type","default","defaultChecked","e","target","checked","defaultValue","OptionsForm","options","flatMap","opt","forEach","BlueprintSelect","BlueprintParamsAsync","renderBlueprintItem","blueprint","rank","BlueprintSelectComponent","paramsInfo","ArchitectParamsAsync","ArchitectSelect","arch","architect","RequesterSelect","renderRequesterItem","requester","RequesterSelectComponent","toaster","Toaster","BOTTOM_LEFT","LaunchInfoAsync","RequesterInfoAsync","DefaultTaskInfoAsync","runningTasksAsync","task_runs","task_run_id","textAlign","LaunchForm","openForm","setOpenForm","launchInfo","requesterInfo","defaultTaskInfo","useReducer","state","keys","startsWith","reduce","obj","addToParams","canOutsideClickClose","RIGHT","blueprint_types","architect_types","validated","allTaskParamsFilled","allFilled","then","dismiss","show","message","intent","Intent","SUCCESS","timeout","catch","NONE","DANGER","large","reviewAsync","App","top","Prepare","Launch","Review","ReactDOM","render","document","getElementById"],"mappings":"0RAQgB,cAAmD,IAA7BA,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MACvD,OACE,kBAAC,IAAD,CAAMC,UAAWC,IAAUC,MAAOC,UAAU,UAC1C,wBAAIA,UAAU,cAAcC,MAAO,CAAEC,aAAc,UACtCC,IAAVP,GACC,0BAAMI,UAAU,sDACbJ,GAGJD,GAEFD,I,2DChBDU,EAAUC,EAAQ,KAyBjB,SAASC,IACd,OAAOC,EAGT,IAAMA,EAAwB,SAAC,GAOxB,IAAD,EANJC,EAMI,EANJA,KACAC,EAKI,EALJA,UACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,YACgBC,EACZ,EADJA,eACI,cACmDL,EADnD,UACKM,EADL,EACKA,KAAMC,EADX,EACWA,QAASC,EADpB,EACoBA,MADpB,OAGEC,EAAiC,CAAEC,aAHrC,MACuC,aADvC,EAG8CC,UAAWX,GAE7D,GAAIO,EAAS,OAAON,EAAU,eAAKQ,IAC9B,GAAID,EAAO,OAAON,EAAQ,aAAEM,MAAK,UAAEA,EAAMI,gBAAR,aAAE,EAAgBN,MAASG,IAEjE,IAAMI,OACelB,IAAnBU,EAA+BA,EAAeC,GAAQA,EAGxD,OAFoBV,EAAQiB,SAEOlB,IAAhBS,EACVA,EAAY,aAAEE,QAASG,IACpBN,EAAO,aAAEG,QAASG,K,qBC9C1BK,EAAsBC,IAAOC,SAE7BC,EAAwD,SAC5DC,EAD4D,GAGxD,IADFC,EACC,EADDA,YAAaC,EACZ,EADYA,UAAWC,EACvB,EADuBA,MAE1B,IAAKD,EAAUE,iBACb,OAAO,KAET,IAAMC,EAAI,UAAML,GAChB,OACE,kBAAC,IAAD,CACEM,OAAQJ,EAAUI,OAClBC,SAAUL,EAAUK,SACpBC,IAAKR,EACLS,QAASR,EACTI,KAAMK,EAAcL,EAAMF,MAKjB,SAASQ,EAAT,GAMX,IALFvB,EAKC,EALDA,KACAwB,EAIC,EAJDA,SAIC,EAC+BC,IAAMC,SAAgC,MADrE,mBACMC,EADN,KACgBC,EADhB,KAED,OACE,6BACE,kBAACpB,EAAD,CACEqB,MAAO7B,EACP8B,aAAcnB,EACdoB,aAAc,SAACnB,GACbY,EAASZ,GACTgB,EAAYhB,IAEdoB,WAAYL,GAEZ,kBAAC,IAAD,CAAQM,KAAK,MAAMC,UAAU,cAC1BP,GAAsB,8BAOjC,SAASQ,EAAkBlB,GACzB,OAAOA,EAAKmB,QAAQ,8BAA+B,QAGrD,SAASd,EAAcL,EAAcF,GACnC,IAAIsB,EAAY,EACVC,EAAQvB,EACXwB,MAAM,OACNC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAAS,KAC7BC,IAAIR,GACP,GAAqB,IAAjBG,EAAMI,OACR,MAAO,CAACzB,GAIV,IAFA,IAAM2B,EAAS,IAAIC,OAAOP,EAAMQ,KAAK,KAAM,MACrCC,EAA4B,KACrB,CACX,IAAMC,EAAQJ,EAAOK,KAAKhC,GAC1B,IAAK+B,EACH,MAEF,IAAMN,EAASM,EAAM,GAAGN,OAClBQ,EAASjC,EAAKkC,MAAMd,EAAWO,EAAOP,UAAYK,GACpDQ,EAAOR,OAAS,GAClBK,EAAOK,KAAKF,GAEdb,EAAYO,EAAOP,UACnBU,EAAOK,KAAK,4BAAQhC,IAAKiB,GAAYW,EAAM,KAE7C,IAAMK,EAAOpC,EAAKkC,MAAMd,GAIxB,OAHIgB,EAAKX,OAAS,GAChBK,EAAOK,KAAKC,GAEPN,E,YCpFHO,E,OAAQC,EAAMC,OAAO,CACzBC,QAAS,kCAWXH,EAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC7B,OAAIA,EAAOC,QACF,IAAIC,SAAQ,SAAAC,GAAO,OACxBC,YACE,kBAAMD,EAAQH,MACK,IAAnBA,EAAOC,QACH,KACmB,IAAnBD,EAAOC,QACP,EACAD,EAAOC,YAIVD,KAGTK,YAAU,CAAEZ,UAEGA,QC3BTa,EAAa,KAEZ,SAASC,EAAWpE,GACzB,IAAMqE,EAWR,SAAkCrE,GAUhC,IAAMsE,EAAcC,OAAOC,QAAQxE,GAChC2C,KAAI,YAAmB,IAAD,mBAAhBvB,EAAgB,KAAXqD,EAAW,KACrB,GAAY,cAARrD,EACF,MAAO,CACL,iBACA,CACEsD,cAAe,mBACfD,MAAOA,IAGN,GAAY,cAARrD,EACT,MAAO,CACL,iBACA,CACEsD,cAAe,mBACfD,MAAOA,IAGN,GAAY,cAARrD,EACT,MAAO,CACL,iBACA,CACEsD,cAAe,mBACfD,MAAOA,IAGL,IAAD,EACqCrD,EAAImB,MAAM,KAD/C,mBACEoC,EADF,KACaC,EADb,KACuBC,EADvB,KAIL,MAAkB,OAAdF,GAAgC,OAAVF,EACjB,CAACN,EAAYA,GAGf,CACLS,EACA,CACEF,cAAeG,EACfJ,MAAiB,OAAVA,EAAiB,KAAQA,EAAcK,gBAKrDtC,QAAO,mCAAEuC,EAAF,iBAAiBA,IAAQZ,KAInC,OADAa,QAAQC,MAAMV,OAAOW,YAAYZ,IAC1BC,OAAOW,YAAYZ,GApECa,CAAyBnF,GACpD,OAAOsD,EAAM8B,KAAK,mBAAoBf,GCCxC,IAAMgB,EAA2B7F,IAC3B8F,EAAqB9F,IAE3B,SAAS+F,EAAT,GAA0E,IAAjDvF,EAAgD,EAAhDA,KAAMwF,EAA0C,EAA1CA,SACvBC,EAAiBzF,EAAKA,KAAK0F,gBAAgBlD,QAC/C,SAACmD,GAAD,MAAkB,gBAANA,KAFyD,EAKblE,IAAMC,SAE9D,MAPqE,mBAKhEkE,EALgE,KAKzCC,EALyC,KASjEC,EAAsBC,YAAwB,CAClDC,IAAI,cAAD,OAAgBJ,EAAhB,cAGL,OACE,yBAAKzG,MAAO,CAAE8G,OAAQ,gBACpB,wBAAI/G,UAAU,eAAd,wBAEA,kBAAC,EAAD,CACEc,KAAMyF,EACNjE,SAAU,SAACZ,GACToE,QAAQkB,IAAI,CAAEtF,kBACdiF,EAAyBjF,MAG5BgF,GACC,kBAACP,EAAD,CACE3F,KAAMoG,EACNnG,UAAW,kBAAM,6CACjBC,QAAS,kBAAM,wCACfC,OAAQ,gBAAUsG,EAAV,cAAGnG,KAAH,aACN,yBAAKb,MAAO,CAAE8G,OAAQ,gBACpB,yBACE/G,UAAU,oDACVC,MAAO,CAAE8G,OAAQ,gBAEjB,wBAAI/G,UAAU,eAAd,WAEA,uBAAGA,UAAU,6BAA6BiH,EAAQC,OAEpD,kBAAC,IAAD,CACEC,cAAe,GACfC,SAAU,SAAAC,GACR,ID1ChBC,EACAC,ECyCsBC,EAAUnC,OAAOW,YACrBX,OAAOC,QAAQ2B,EAAQQ,MAAMhE,KAC3B,YAA4B,IAAD,mBAAzBiE,EAAyB,KACzB,MAAO,CACLA,EACA,CACElC,cAJqB,KAIgBA,cACrCD,MAAQ8B,EAAeK,SDjDjDJ,ECuDgCZ,EDtDhCa,ECsDuDC,EDpDhDpD,EAAM8B,KAAN,oBAAwBoB,EAAxB,aAA6CC,GCqDpCjB,OAGD,gBACCe,EADD,EACCA,OAGAM,GAJD,EAECC,OAFD,EAGCC,QAHD,EAICF,cACAG,EALD,EAKCA,WACAC,EAND,EAMCA,aAND,EAOCC,aAPD,OASC,6BAEG3C,OAAOC,QAAQ2B,EAAQQ,MAAMhE,KAC5B,YAAmC,IAAD,mBAAhCiE,EAAgC,KAAzBT,EAAyB,KAChC,OACE,kBAAC,IAAD,CACE/E,IAAKwF,EACLO,MAAOhB,EAAQiB,KACfC,UAAWlB,EAAQzB,cACnB4C,SAAS,QAET,kBAAC,IAAD,CACEC,GAAG,YACHC,YAAa,GACbC,KAAMb,EACNc,OAAQV,EACRvC,MAAQ8B,EAAeK,IAAU,GACjCe,SAAUd,QAMpB,kBAAC,IAAD,CAAQ5E,KAAK,aAAaZ,QAAS,kBAAM4F,MAAzC,yCA6BLW,MAff,YAAiE,IAAhCpC,EAA+B,EAA/BA,SACzBqC,EAAqB9B,YAAwB,CACjDC,IAAI,oBAGN,OACE,kBAACV,EAAD,CACE5F,KAAMmI,EACNlI,UAAW,kBAAM,6CACjBC,QAAS,kBAAM,wCACfC,OAAQ,SAAAG,GAAI,OAAI,kBAACuF,EAAD,CAAeC,SAAUA,EAAUxF,KAAMA,QCtHzDP,EAAQD,IAEE,aAA0B,ICbHiD,EAAcqF,EDaZ,EACCrG,IAAMC,SAAS,GADhB,gCAEWD,IAAMC,SAAS,IAF1B,mBAEhCqG,EAFgC,aAGetG,IAAMC,UAAS,IAH9B,mBAGhCsG,EAHgC,KAGXC,EAHW,KAKjCC,EAAiBnC,YAAqB,CAC1CC,IAAK,eAGP,OACE,kBAACmC,EAAD,CAAYrJ,MAAM,SAASD,QAAS,6CAClC,oCACE,yBAAKK,UAAU,UACb,yBAAKA,UAAU,kDACb,kBAAC,EAAD,CACEQ,KAAMwI,EACNtI,QAAS,gBAAGQ,EAAH,EAAGA,QAAH,OACP,8BACE,kBAAC,IAAD,CAAM6B,KAAK,eAAemG,MAAOC,IAAOC,OAD1C,yBAEc,IACZ,uBAAGjH,QAAS,kBAAMjB,MAChB,gDAINT,UAAW,kBACT,yBAAKT,UAAU,yBAAf,UAEFa,eAAgB,SAAAC,GAAI,OAAIA,EAAKuI,YAC7BzI,YAAa,kBACX,8BACE,kBAAC,IAAD,CAAMmC,KAAK,eAAemG,MAAOC,IAAOG,UACvC,KAFH,+BAG+B,IAC7B,uBAAGnH,QAAS,kBAAM4G,GAAuB,KACvC,gDAINpI,OAAQ,gBAAGG,EAAH,EAAGA,KAAH,OACN,8BACE,kBAAC,IAAD,CAAMiC,KAAK,WADb,YACkC,IAChC,uBAAGZ,QAAS,kBAAM4G,GAAuB,KACvC,gCAASjI,EAAKuI,WAAW7F,OAAzB,wBACG,IAJP,cAUN,kBAAC,IAAD,CACET,KAAK,SACLwG,QAAS,kBAAMR,GAAuB,IACtCS,MAAM,qBACNC,WAAW,EACXC,mBAAmB,EAEnBC,cAAc,EACdC,aAAa,EACbC,OAAQf,EACRgB,SAAUC,IAASC,OACnBC,KAAM,MACNC,WAAW,GAEX,yBACElK,UAAWmK,IAAQC,YACnBnK,MAAO,CAAEoK,gBAAiBlB,IAAOmB,cAEjC,yBAAKtK,UAAWmK,IAAQI,aACrBvB,EAAe,GAAGlI,MACjB,6BACGkI,EAAe,GAAGlI,KAAKuI,WAAW5F,KAAI,SAACgD,GAAD,OACrC,yBAAKvE,IAAKuE,EAAE+D,aAAcvK,MAAO,CAAEC,aAAc,KAC/C,kBAAC,IAAD,CAAMuK,aAAa,GACjB,kBAAC,IAAD,CACE1H,KAAM0D,EAAEiE,WAAa,cAAgB,QACrCxB,MAAOzC,EAAEiE,WAAavB,IAAOwB,OAASxB,IAAOyB,MAC7CpB,MAAO,gBAET,0BACEvJ,MAAO,CAAE8G,OAAQ,UACjB/G,UAAU,sDAETyG,EAAEoE,eAEL,wBACE5K,MAAO,CAAE6K,QAAS,SAAUC,YAAa,GACzC/K,UAAWgL,IAAG,cAAe,CAC3B,kBAAmBvE,EAAEiE,cAGtBjE,EAAEwE,gBACC,KACJxE,EAAEiE,YACF,wFAOR,yBAAKzK,MAAO,CAAEiL,UAAW,KACvB,kBAAC,EAAD,CACE5E,SAAU,WACRyC,GAAuB,GACvBoC,OAAOC,SAASC,kBAUlC,yBAAKrL,UAAU,UACb,yBAAKA,UAAU,kDACb,kBAAC,IAAD,CAAM+C,KAA4B,IAAtB8F,EAA0B,QAAU,WADlD,YAEO,IACL,gCACGA,EADH,QAC2B,KCrIAtF,EDsIK,WCrI9B,IDqIWsF,ECpIdtF,EACKqF,GAAUrF,EAAO,MDqIpB,KAPH,wB,yBE5HK,SAAS+H,EAAT,GAAoD,IAA1BC,EAAyB,EAAzBA,IACvC,OACE,yBACEvL,UAAU,aACVC,MAAO,CACLoK,gBAAiBlB,IAAOqC,YACxBC,QAAS,GACTvL,aAAc,OACdwL,YAAavC,IAAOwC,MACpBC,YAAa,EACbC,YAAa,QACbC,aAAc,IAGhB,wBAAI9L,UAAU,cAAcC,MAAO,CAAE6K,QAAS,WAC3CS,EAAIQ,WACD,IAdR,UAeWC,IAAOC,IAAIV,EAAIW,YAAYC,UASpC,yBAAKnM,UAAU,cAAcC,MAAO,CAAE6K,QAAS,QAASI,UAAW,KAChE7F,OAAOC,QAAQiG,EAAIa,QAAQ3I,KAAI,mCAAEvB,EAAF,KAAOqD,EAAP,YAC9B,0BACErD,IAAKA,EACLjC,MAAO,CAAE6K,QAAS,eAAgBC,YAAa,EAAGsB,SAAU,KAE5D,0BAAMrM,UAAU,cAAckC,GAJhC,IAKE,4BAAQlC,UAAU,eAAeuF,QAIvC,yBAAKvF,UAAU,WACb,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,UACZuL,EAAIe,YAAYC,QAAUhB,EAAIe,YAAYE,SAC3C,6CAEF,yBAAKxM,UAAU,UACZuL,EAAIe,YAAYG,UACflB,EAAIe,YAAYI,SAChBnB,EAAIe,YAAYK,MAChBpB,EAAIe,YAAYM,SAClB,6CAEF,yBAAK5M,UAAU,UACZuL,EAAIe,YAAYE,SAAWjB,EAAIe,YAAYO,SAC5C,gD,YCPGC,MA/Cf,YAQI,IAPFC,EAOC,EAPDA,OACAzK,EAMC,EANDA,SACA0K,EAKC,EALDA,MAMM3E,EAAK0E,EAAS,IAAMC,EAAMC,KAAO,IAAMD,EAAMxH,cAC7C0H,EAAW,SAAC3H,GAChBjD,EAAS,eACN+F,EAAK9C,KAYV,OARAhD,IAAM4K,WAAU,WACK,SAAfH,EAAMI,KACRF,IAAWF,EAAMK,SACNL,EAAMK,SACjBH,EAASF,EAAMK,WAEhB,CAACL,EAAMK,UAEY,SAAfL,EAAMI,KACX,yBAAKlL,IAAK8K,EAAMC,MACd,kBAAC,IAAD,CACEK,iBAAkBN,EAAMK,QACxBpF,MAAO+E,EAAMC,KACbxE,SAAU,SAAC8E,GACTL,EAASK,EAAEC,OAAOC,YAGtB,uBAAGzN,UAAU,kBAAkBgN,EAAM9E,OAGvC,kBAAC,IAAD,CAAWD,MAAO+E,EAAMC,KAAM9E,UAAW6E,EAAM9E,KAAME,SAAUC,GAC7D,kBAAC,IAAD,CACEA,GAAIA,EACJC,YAAa0E,EAAMK,QACnBK,aAAcV,EAAMK,QACpB5E,SAAU,SAAC8E,GAAD,OAAYL,EAASK,EAAEC,OAAOjI,YCGjCoI,MA3Cf,YAQI,IAPFZ,EAOC,EAPDA,OACAzK,EAMC,EANDA,SACAsL,EAKC,EALDA,QAkBA,OAZArL,IAAM4K,WAAU,WACd7K,EAAS,SAAWyK,GACpB1H,OAAOgC,OAAOuG,GACXC,SAAQ,SAACC,GAAD,OAAczI,OAAOgC,OAAOyG,EAAIrG,SACxCsG,SAAQ,SAACf,GACR,IAAM3E,EAAK0E,EAAS,IAAMC,EAAMC,KAAO,IAAMD,EAAMxH,cACnDlD,EAAS,eACN+F,EAAK2E,EAAMK,eAGjB,CAACO,IAGF,6BACE,yBAAK3N,MAAO,CAAE8G,OAAQ,WACpB,kBAAC,IAAD,CAAM/G,UAAU,mBACbqF,OAAOgC,OAAOuG,GACZC,SAAQ,SAACC,GAAD,OAAczI,OAAOgC,OAAOyG,EAAIrG,SACxChE,KAAI,SAACuJ,GACJ,OACE,kBAAC,EAAD,CACE9K,IAAK6K,EAASC,EAAMC,KACpBF,OAAQA,EACRzK,SAAUA,EACV0K,MAAOA,WCtBnBgB,EAAkBzM,IAAOC,SACzByM,EAAuB3N,IAEvB4N,EAAgD,SACpDC,EADoD,GAGhD,IADFxM,EACC,EADDA,YAAaC,EACZ,EADYA,UAAWC,EACvB,EADuBA,MAE1B,IAAKD,EAAUE,iBACb,OAAO,KAET,IAAMC,EAAI,UAAMoM,EAAUC,KAAhB,aAAyBD,EAAU5F,MAC7C,OACE,kBAAC,IAAD,CACEvG,OAAQJ,EAAUI,OAClBC,SAAUL,EAAUK,SACpBC,IAAKiM,EAAUC,KACfjM,QAASR,EACTI,KAAMK,EAAcL,EAAMF,MAKjB,SAASwM,EAAT,GAMX,IALFvN,EAKC,EALDA,KACAwB,EAIC,EAJDA,SAIC,EAC+BC,IAAMC,SAA4B,MADjE,mBACMC,EADN,KACgBC,EADhB,KAEK4L,EAAazH,YAAS,CAC1BC,IAAI,aAAD,QAAuB,OAARrE,QAAQ,IAARA,OAAA,EAAAA,EAAU8F,OAAQ,OAAjC,cAGL,OACE,6BACE,kBAACyF,EAAD,CACErL,MAAO7B,EACP8B,aAAcsL,EACdrL,aAAc,SAACsL,GACb7L,EAAS,CAAE6L,UAAWA,EAAU5F,OAChC7F,EAAYyL,IAEdrL,WAAYL,GAEZ,kBAAC,IAAD,CAAQM,KAAK,MAAMC,UAAU,cAC1BP,EAAWA,EAAS8F,KAAO,wBAG/B9F,GACC,kBAACwL,EAAD,CACEzN,KAAM8N,EACN7N,UAAW,kBAAM,6CACjBC,QAAS,kBAAM,wCACfC,OAAQ,gBAAGG,EAAH,EAAGA,KAAH,OACN,kBAAC,EAAD,CACEwB,SAAUA,EACVsL,QAAS9M,EAAK8M,QACdb,OAAO,WASrB,SAAS9J,EAAkBlB,GACzB,OAAOA,EAAKmB,QAAQ,8BAA+B,QAGrD,SAASd,EAAcL,EAAcF,GACnC,IAAIsB,EAAY,EACVC,EAAQvB,EACXwB,MAAM,OACNC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAAS,KAC7BC,IAAIR,GACP,GAAqB,IAAjBG,EAAMI,OACR,MAAO,CAACzB,GAIV,IAFA,IAAM2B,EAAS,IAAIC,OAAOP,EAAMQ,KAAK,KAAM,MACrCC,EAA4B,KACrB,CACX,IAAMC,EAAQJ,EAAOK,KAAKhC,GAC1B,IAAK+B,EACH,MAEF,IAAMN,EAASM,EAAM,GAAGN,OAClBQ,EAASjC,EAAKkC,MAAMd,EAAWO,EAAOP,UAAYK,GACpDQ,EAAOR,OAAS,GAClBK,EAAOK,KAAKF,GAEdb,EAAYO,EAAOP,UACnBU,EAAOK,KAAK,4BAAQhC,IAAKiB,GAAYW,EAAM,KAE7C,IAAMK,EAAOpC,EAAKkC,MAAMd,GAIxB,OAHIgB,EAAKX,OAAS,GAChBK,EAAOK,KAAKC,GAEPN,ECpGT,IAAM0K,EAAuBjO,IAEd,SAASkO,EAAT,GAMX,IALF1N,EAKC,EALDA,KACAwB,EAIC,EAJDA,SAIC,EAC+BC,IAAMC,SAAS,MAD9C,mBACMC,EADN,KACgBC,EADhB,KAEK4L,EAAazH,YAAS,CAC1BC,IAAI,aAAD,OAAerE,GAAY,OAA3B,cAGL,OACE,6BACG3B,EAAK2C,KAAI,SAACgL,GAAD,OACR,kBAAC,IAAD,CACEvM,IAAKuM,EACLhE,YAAagE,IAAShM,EACtBxC,MAAO,CACLC,aAAc,GACdmK,qBAAqClK,GAEvCgC,QAAS,WACPO,EAAY+L,GACZnM,EAAS,CAAEoM,UAAWD,MAGxB,kBAAC,IAAD,CACE1L,KAAM0L,IAAShM,EAAW,cAAgB,SAC1CyG,MAAOuF,IAAShM,EAAW0G,IAAOwB,OAASxB,IAAOyB,MAClDpB,MAAO,WACPvJ,MAAO,CAAE8K,YAAa,MAEvB0D,MAGJhM,GACC,kBAAC8L,EAAD,CACE/N,KAAM8N,EACN7N,UAAW,kBAAM,6CACjBC,QAAS,kBAAM,wCACfC,OAAQ,gBAAGG,EAAH,EAAGA,KAAH,OACN,kBAAC,EAAD,CACEwB,SAAUA,EACVsL,QAAS9M,EAAK8M,QACdb,OAAO,aCtDrB,IAAM4B,GAAkBpN,IAAOC,SAEzBoN,GAAgD,SACpDC,EADoD,GAGhD,IADFlN,EACC,EADDA,YAAaC,EACZ,EADYA,UAAWC,EACvB,EADuBA,MAE1B,IAAKD,EAAUE,iBACb,OAAO,KAET,IAAMC,EAAI,UAAM8M,EAAUrE,aAAhB,aAAiCqE,EAAU5D,gBACrD,OACE,kBAAC,IAAD,CACEjJ,OAAQJ,EAAUI,OAClBC,SAAUL,EAAUK,SACpBC,IAAK2M,EAAUrE,aACfrI,QAASR,EACTI,KAAMK,GAAcL,EAAMF,MAKjB,SAASiN,GAAT,GAMX,IALFhO,EAKC,EALDA,KACAwB,EAIC,EAJDA,SAIC,EAC+BC,IAAMC,SAA4B,MADjE,mBACMC,EADN,KACgBC,EADhB,KAED,OACE,6BACE,kBAACiM,GAAD,CACEhM,MAAO7B,EACP8B,aAAcgM,GACd/L,aAAc,SAACgM,GACbvM,EAAS,CAAEuM,UAAWA,EAAU5D,iBAChCvI,EAAYmM,IAEd/L,WAAYL,GAEZ,kBAAC,IAAD,CAAQM,KAAK,MAAMC,UAAU,cAC1BP,EAAWA,EAASwI,eAAiB,yBAOhD,SAAShI,GAAkBlB,GACzB,OAAOA,EAAKmB,QAAQ,8BAA+B,QAGrD,SAASd,GAAcL,EAAcF,GACnC,IAAIsB,EAAY,EACVC,EAAQvB,EACXwB,MAAM,OACNC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAAS,KAC7BC,IAAIR,IACP,GAAqB,IAAjBG,EAAMI,OACR,MAAO,CAACzB,GAIV,IAFA,IAAM2B,EAAS,IAAIC,OAAOP,EAAMQ,KAAK,KAAM,MACrCC,EAA4B,KACrB,CACX,IAAMC,EAAQJ,EAAOK,KAAKhC,GAC1B,IAAK+B,EACH,MAEF,IAAMN,EAASM,EAAM,GAAGN,OAClBQ,EAASjC,EAAKkC,MAAMd,EAAWO,EAAOP,UAAYK,GACpDQ,EAAOR,OAAS,GAClBK,EAAOK,KAAKF,GAEdb,EAAYO,EAAOP,UACnBU,EAAOK,KAAK,4BAAQhC,IAAKiB,GAAYW,EAAM,KAE7C,IAAMK,EAAOpC,EAAKkC,MAAMd,GAIxB,OAHIgB,EAAKX,OAAS,GAChBK,EAAOK,KAAKC,GAEPN,ECrFT,IAAIkL,GAAUC,IAAQ1K,OAAO,CAAEwF,SAAUC,IAASkF,cCuB5C1O,GAAQD,IACR4O,GAAkB5O,IAClB6O,GAAqB7O,IACrB8O,GAAuB9O,IAEb,cAEd,IAAM+O,EAAoBxI,YAAS,CAAEC,IAAK,sBAE1C,OACE,kBAACmC,EAAD,CAAYrJ,MAAM,SAASD,QAAS,4CAClC,kBAAC,GAAD,CACEa,KAAM6O,EACN5O,UAAW,kBACT,yBAAKT,UAAU,oCACb,yBACEA,UAAU,6BACVC,MAAO,CAAEoM,SAAU,KAEnB,0BAAMrM,UAAU,6BAElB,6DAGJW,OAAQ,gBAAGG,EAAH,EAAGA,KAAH,OACN,6BACGA,EAAKwO,UAAU7L,KAAI,SAAC8H,GAAD,OAClB,kBAACD,EAAD,CAAgBpJ,IAAKqJ,EAAIgE,YAAahE,IAAKA,SAIjD1K,eAAgB,SAAAC,GAAI,OAAIA,EAAKwO,WAC7B1O,YAAa,kBACX,yBAAKZ,UAAU,uBACb,yBACEA,UAAU,6BACVC,MAAO,CAAEoM,SAAU,KAEnB,0BAAMrM,UAAU,6BAElB,6DAGJU,QAAS,gBAAGQ,EAAH,EAAGA,QAAH,OACP,8BACE,kBAAC,IAAD,CAAM6B,KAAK,eAAemG,MAAOC,IAAOC,OAD1C,yBAES,IACP,uBAAGjH,QAAS,kBAAMjB,MAChB,kDAKR,6BACE,yBAAKjB,MAAO,CAAEuP,UAAW,SAAUtE,UAAW,KAC5C,kBAACuE,GAAD,UAOV,SAASA,KAAc,IAAD,EACYlN,IAAMC,UAAS,GAD3B,mBACbkN,EADa,KACHC,EADG,KAEdC,EAAa/I,YAAS,CAAEC,IAAK,mBAC7B+I,EAAgBhJ,YAAS,CAC7BC,IAAK,eAEDgJ,EAAkBjJ,YAAS,CAC/BC,IAAK,sBAPa,EAUUvE,IAAMwN,YAAW,SAACC,EAAO5D,GA4BrD,MA1Be,cAAXA,EACU,GACQ,aAAXA,EACG/G,OAAO4K,KAAKD,GACrB1M,QAAO,SAAApB,GAAG,OAAKA,EAAIgO,WAAW,UAC9BC,QAAO,SAACC,EAAUlO,GAEjB,OADAkO,EAAIlO,GAAO8N,EAAM9N,GACVkO,IACN,IACe,eAAXhE,EACG/G,OAAO4K,KAAKD,GACrB1M,QAAO,SAAApB,GAAG,OAAKA,EAAIgO,WAAW,YAC9BC,QAAO,SAACC,EAAUlO,GAEjB,OADAkO,EAAIlO,GAAO8N,EAAM9N,GACVkO,IACN,IACe,eAAXhE,EACG/G,OAAO4K,KAAKD,GACrB1M,QAAO,SAAApB,GAAG,OAAKA,EAAIgO,WAAW,YAC9BC,QAAO,SAACC,EAAUlO,GAEjB,OADAkO,EAAIlO,GAAO8N,EAAM9N,GACVkO,IACN,IAEI,eAAQJ,EAAR,GAAkB5D,KAG5B,IAvCiB,mBAUbA,EAVa,KAULiE,EAVK,KAyCpB,OACE,6BACE,4BAAQrQ,UAAU,aAAamC,QAAS,kBAAMwN,GAAY,KAA1D,iBAGA,kBAAC,IAAD,CACE5M,KAAK,SACLwG,QAAS,kBAAMoG,GAAY,IAC3BnG,MAAM,gBACNC,WAAW,EACXC,mBAAmB,EACnB4G,sBAAsB,EACtB3G,cAAc,EACdC,aAAa,EACbC,OAAQ6F,EACR5F,SAAUC,IAASwG,MACnBtG,KAAM,MACNC,WAAW,GAEX,yBACElK,UAAWmK,IAAQC,YACnBnK,MAAO,CAAEoK,gBAAiBlB,IAAOmB,cAEjC,yBAAKtK,UAAWmK,IAAQI,aACtB,+DACA,uBAAGvK,UAAU,kBAAb,4FAIA,kBAACkP,GAAD,CACE1O,KAAMoP,EACNnP,UAAW,kBAAM,6CACjBE,OAAQ,gBAAGG,EAAH,EAAGA,KAAH,OACN,6BACE,kBAAC,EAAD,CACEA,KAAMA,EAAK0P,gBACXlO,SAAU,SAACxB,GAAD,OAAeuP,EAAYvP,QAI3CJ,QAAS,kBAAM,0CAGjB,2DACA,uBAAGV,UAAU,kBAAb,4DAGA,kBAACkP,GAAD,CACE1O,KAAMoP,EACNnP,UAAW,kBAAM,6CACjBE,OAAQ,gBAAGG,EAAH,EAAGA,KAAH,OACN,6BACE,kBAAC0N,EAAD,CACE1N,KAAMA,EAAK2P,gBACXnO,SAAU,SAACxB,GACTuP,EAAYvP,QAKpBJ,QAAS,kBAAM,0CAEjB,0DACA,uBAAGV,UAAU,kBAAb,+DAGA,kBAACmP,GAAD,CACE3O,KAAMqP,EACNpP,UAAW,kBAAM,6CACjBE,OAAQ,gBAAGG,EAAH,EAAGA,KAAH,OACN,6BACE,kBAAC,GAAD,CACEA,KAAMA,EAAKuI,WAAW/F,QAAO,SAACmD,GAAD,OAAYA,EAAEiE,cAC3CpI,SAAU,SAACxB,GACTuP,EAAYvP,QAKpBJ,QAAS,kBAAM,0CAEjB,0DACA,kBAAC0O,GAAD,CACE5O,KAAMsP,EACNrP,UAAW,kBAAM,6CACjBE,OAAQ,gBAAGG,EAAH,EAAGA,KAAH,OACN,6BACE,kBAAC,EAAD,CACEiM,OAAO,OACPa,QAAS9M,EAAK8M,QACdtL,SAAU,SAACxB,GAAD,OAAeuP,EAAYvP,QAI3CJ,QAAS,kBAAM,0CAGjB,kBAAC,IAAD,CACEyB,QAAS,WACP,IAAIuO,OACmBvQ,IAArBiM,EAAO+B,gBACchO,IAArBiM,EAAOsC,gBACcvO,IAArBiM,EAAOyC,UAEH8B,EAAsBtL,OAAOC,QAAQ8G,GAAQ+D,QACjD,SAACS,EAAD,GAA8B,IAAD,mBAAhB1O,EAAgB,KAAXqD,EAAW,KAC3B,OAAIrD,EAAIgO,WAAW,SACVU,GAAuB,OAAVrL,EAEbqL,KAGX,IAGFF,EAAYA,GAAaC,IAGvBN,EAAY,aAEZnL,EAAWkH,GACRyE,MAAK,WACJlB,GAAY,GAEZZ,GAAQ+B,QAAQ,eAChB/B,GAAQgC,KAAK,CACXC,QAAS,YACTjO,KAAM,eACNkO,OAAQC,IAAOC,QACfC,QAAS,SAGZC,OAAM,eAMTtC,GAAQgC,KACN,CACEC,QACE,uDACFjO,KAAM,eACNkO,OAAQC,IAAOI,KACfF,QAAS,KAEX,gBAGFrC,GAAQgC,KAAK,CACXC,QACE,gFACFjO,KAAM,eACNkO,OAAQC,IAAOK,OACfH,QAAS,OAIfI,OAAK,EACLzO,KAAK,eACLkO,OAAQC,IAAOC,QACflR,MAAO,CAAE8G,OAAQ,gBAhEnB,cCzNZ,IAAMxG,GAAQD,IAEE,cACd,IAAMmR,EAAc5K,YAAS,CAC3BC,IAAK,yBAGP,OACE,kBAACmC,EAAD,CAAYrJ,MAAM,SAASD,QAAS,4CAClC,kBAAC,GAAD,CACEa,KAAMiR,EACNhR,UAAW,kBACT,yBAAKT,UAAU,gBACb,yBAAKA,UAAU,uBACb,yBACEA,UAAU,6BACVC,MAAO,CAAEoM,SAAU,KAEnB,0BAAMrM,UAAU,oCAElB,+DAINU,QAAS,gBAAGQ,EAAH,EAAGA,QAAH,OACP,8BACE,kBAAC,IAAD,CAAM6B,KAAK,eAAemG,MAAOC,IAAOC,OAD1C,yBAES,IACP,uBAAGjH,QAAS,kBAAMjB,MAChB,gDAINP,OAAQ,gBAAGG,EAAH,EAAGA,KAAH,OACN,8BACGA,EAAKwO,UAAU7L,KAAI,SAAA8H,GAAG,OACrB,kBAACD,EAAD,CAAgBpJ,IAAKqJ,EAAIgE,YAAahE,IAAKA,SAIjD1K,eAAgB,SAAAC,GAAI,OAAIA,EAAKwO,WAC7B1O,YAAa,kBACX,6BACE,yBAAKZ,UAAU,uBACb,yBACEA,UAAU,6BACVC,MAAO,CAAEoM,SAAU,KAEnB,0BAAMrM,UAAU,oCAElB,mEC9BC0R,GAtBO,WACpB,OACE,yBAAK1R,UAAU,OACb,yBAAKA,UAAU,mBACf,gCACE,wBAAIA,UAAU,eAAd,YACA,wBACEA,UAAU,+CACVC,MAAO,CAAE6J,SAAU,WAAY6H,KAAM,IAFvC,oCAOF,yBAAK3R,UAAU,aACb,kBAAC4R,EAAD,MACA,kBAACC,GAAD,MACA,kBAACC,GAAD,S,cCZRC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.13f9c80a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Elevation } from \"@blueprintjs/core\";\n\ninterface BaseProps {\n  heading: React.ReactElement;\n  badge: string | undefined;\n}\n\nexport default (function BaseWidget({ children, heading, badge }) {\n  return (\n    <Card elevation={Elevation.THREE} className=\"widget\">\n      <h4 className=\"bp3-heading\" style={{ marginBottom: 15 }}>\n        {badge !== undefined && (\n          <span className=\"bp3-tag bp3-large bp3-minimal bp3-round step-badge\">\n            {badge}\n          </span>\n        )}\n        {heading}\n      </h4>\n      {children}\n    </Card>\n  );\n} as React.FC<BaseProps>);\n","import React from \"react\";\nimport { AxiosPromise, AxiosRequestConfig } from \"axios\";\nimport { ResponseValues, RefetchOptions } from \"axios-hooks\";\nconst isEmpty = require(\"lodash.isempty\");\n\ntype AxiosInfo<T> =\n  | [\n      ResponseValues<T>,\n      (config?: AxiosRequestConfig, options?: RefetchOptions) => AxiosPromise<T>\n    ]\n  | [ResponseValues<T>];\n\ntype BaseAsyncProps<T> = {\n  axiosInfo: AxiosInfo<T>;\n  refetch: Function;\n};\n\ntype AsyncProps<T> = {\n  info: AxiosInfo<T>;\n  onLoading: React.FC<BaseAsyncProps<T>>;\n  onError: React.FC<{ error: any } & BaseAsyncProps<T>>;\n  onData: React.FC<{ data: T } & BaseAsyncProps<T>>;\n  onEmptyData?: React.FC<{ data: T } & BaseAsyncProps<T>>;\n  checkIfEmptyFn?: (data: T) => any;\n};\n\nexport type AsyncComponent<T = any> = React.FC<AsyncProps<T>>;\n\nexport function createAsync<T>() {\n  return Async as AsyncComponent<T>;\n}\n\nconst Async: AsyncComponent = ({\n  info,\n  onLoading,\n  onError,\n  onData,\n  onEmptyData,\n  checkIfEmptyFn: checkIfEmptyFn\n}) => {\n  const [{ data, loading, error }, refetch = () => {}] = info;\n\n  const baseProps: BaseAsyncProps<any> = { refetch, axiosInfo: info };\n\n  if (loading) return onLoading({ ...baseProps });\n  else if (error) return onError({ error: error.response?.data, ...baseProps });\n\n  const dataToCheckIfEmpty =\n    checkIfEmptyFn !== undefined ? checkIfEmptyFn(data) : data;\n  const dataIsEmpty = isEmpty(dataToCheckIfEmpty);\n\n  if (dataIsEmpty && onEmptyData !== undefined)\n    return onEmptyData({ data, ...baseProps });\n  else return onData({ data, ...baseProps });\n};\n\nexport default Async;\n\nexport function mockRequest<T>(\n  mockData: T,\n  error: any = undefined,\n  loading: boolean = false\n) {\n  const request = {\n    data: mockData,\n    loading,\n    error: error && { response: { data: error } }\n  } as ResponseValues<T>;\n  return [request, () => {}] as [ResponseValues<T>, any];\n}\n","import React from \"react\";\nimport { Select, ItemRenderer } from \"@blueprintjs/select\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { RequesterType } from \"../../models\";\n\ntype IRequesterType = RequesterType;\n\nconst RequesterTypeSelect = Select.ofType<IRequesterType>();\n\nconst renderRequesterTypeItem: ItemRenderer<IRequesterType> = (\n  requesterType,\n  { handleClick, modifiers, query }\n) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n  const text = `${requesterType}`;\n  return (\n    <MenuItem\n      active={modifiers.active}\n      disabled={modifiers.disabled}\n      key={requesterType}\n      onClick={handleClick}\n      text={highlightText(text, query)}\n    />\n  );\n};\n\nexport default function RequesterTypeSelectComponent<T>({\n  data,\n  onUpdate\n}: {\n  data: IRequesterType[];\n  onUpdate: Function;\n}) {\n  const [selected, setSelected] = React.useState<IRequesterType | null>(null);\n  return (\n    <div>\n      <RequesterTypeSelect\n        items={data}\n        itemRenderer={renderRequesterTypeItem}\n        onItemSelect={(requesterType: IRequesterType) => {\n          onUpdate(requesterType);\n          setSelected(requesterType);\n        }}\n        activeItem={selected}\n      >\n        <Button icon=\"map\" rightIcon=\"caret-down\">\n          {selected ? selected : \"Pick a requester type...\"}\n        </Button>\n      </RequesterTypeSelect>\n    </div>\n  );\n}\n\nfunction escapeRegExpChars(text: string) {\n  return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\nfunction highlightText(text: string, query: string) {\n  let lastIndex = 0;\n  const words = query\n    .split(/\\s+/)\n    .filter(word => word.length > 0)\n    .map(escapeRegExpChars);\n  if (words.length === 0) {\n    return [text];\n  }\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\n  const tokens: React.ReactNode[] = [];\n  while (true) {\n    const match = regexp.exec(text);\n    if (!match) {\n      break;\n    }\n    const length = match[0].length;\n    const before = text.slice(lastIndex, regexp.lastIndex - length);\n    if (before.length > 0) {\n      tokens.push(before);\n    }\n    lastIndex = regexp.lastIndex;\n    tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n  }\n  const rest = text.slice(lastIndex);\n  if (rest.length > 0) {\n    tokens.push(rest);\n  }\n  return tokens;\n}\n","import { configure } from \"axios-hooks\";\nimport Axios, { AxiosRequestConfig } from \"axios\";\n\nconst axios = Axios.create({\n  baseURL: \"http://localhost:5000/api/v1/\"\n});\n\ndeclare module \"axios\" {\n  export interface AxiosRequestConfig {\n    delayed?: boolean | number;\n  }\n}\n\n// type CustomAxiosRequestConfig = AxiosRequestConfig & { delayed?: boolean };\n\naxios.interceptors.request.use(config => {\n  if (config.delayed) {\n    return new Promise(resolve =>\n      setTimeout(\n        () => resolve(config),\n        config.delayed === true\n          ? 600\n          : config.delayed === false\n          ? 0\n          : config.delayed\n      )\n    );\n  }\n  return config;\n});\n\nconfigure({ axios });\n\nexport default axios;\n","import axios from \"./axios\";\nimport { AxiosPromise } from \"axios\";\n\n// TEMP HACK NULL_FIELDS: some static task fields have a default value of null\n// while null is also an unacceptable value, we detect explict exceptions for now\n// and handle the process of skipping these fields\nconst SKIP_FIELD = null;\n\nexport function launchTask(data: any): AxiosPromise<any> {\n  const transformedPayload = mapDataToExpectedPayload(data);\n  return axios.post(\"task_runs/launch\", transformedPayload);\n}\n\nexport function createRequester(\n  provider: string,\n  payload: any\n): AxiosPromise<any> {\n  return axios.post(`requester/${provider}/register`, payload);\n}\n\nfunction mapDataToExpectedPayload(data: any) {\n  // We expect to receive a payload of the following format that\n  // will then transform to suit the API's expectations:\n  //\n  // {\n  //    \"blueprint\": \"name\",\n  //    \"architect\": \"name\",\n  //    \"requester\": \"name\",\n  //    \"bp|<arg-name>|<--arg-flag>\": \"value\"\n  // }\n  const transformed = Object.entries(data)\n    .map(([key, value]) => {\n      if (key === \"blueprint\") {\n        return [\n          \"blueprint_type\",\n          {\n            option_string: \"--blueprint-type\",\n            value: value\n          }\n        ];\n      } else if (key === \"architect\") {\n        return [\n          \"architect_type\",\n          {\n            option_string: \"--architect-type\",\n            value: value\n          }\n        ];\n      } else if (key === \"requester\") {\n        return [\n          \"requester_name\",\n          {\n            option_string: \"--requester-name\",\n            value: value\n          }\n        ];\n      } else {\n        const [namespace, arg_name, opt_string] = key.split(\"|\");\n\n        /* TEMP HACK NULL_FIELDS - handle in a more sophisticated fashion once optional or required flags are added */\n        if (namespace === \"bp\" && value === null) {\n          return [SKIP_FIELD, SKIP_FIELD];\n        }\n\n        return [\n          arg_name,\n          {\n            option_string: opt_string,\n            value: value === null ? null : (value as any).toString()\n          }\n        ];\n      }\n    })\n    .filter(([arg, data]) => arg !== SKIP_FIELD);\n  /* ^ TEMP HACK NULL_FIELDS filter out empty fields */\n\n  console.table(Object.fromEntries(transformed));\n  return Object.fromEntries(transformed);\n}\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { InputGroup, FormGroup, Button } from \"@blueprintjs/core\";\nimport useAxios from \"axios-hooks\";\nimport { createAsync } from \"../../lib/Async\";\nimport RequesterTypeSelect from \"./RequesterTypeSelect\";\nimport { createRequester } from \"../../service\";\n\ntype RequesterType = any;\ntype RequesterTypeParams = any;\n\nconst RequesterTypeParamsAsync = createAsync<RequesterTypeParams>();\nconst LaunchOptionsAsync = createAsync<any>();\n\nfunction RequesterForm({ data, onFinish }: { data: any; onFinish: any }) {\n  const requesterTypes = data.data.requester_types.filter(\n    (r: any) => r !== \"__pycache__\"\n  );\n\n  const [selectedRequesterType, setSelectedRequesterType] = React.useState<\n    string | null\n  >(null);\n\n  const requesterTypesAsync = useAxios<RequesterType>({\n    url: `/requester/${selectedRequesterType}/options`\n  });\n\n  return (\n    <div style={{ margin: \"40px 0 20px\" }}>\n      <h3 className=\"bp3-heading\">Add a New Requester:</h3>\n\n      <RequesterTypeSelect\n        data={requesterTypes}\n        onUpdate={(requesterType: string) => {\n          console.log({ requesterType });\n          setSelectedRequesterType(requesterType);\n        }}\n      />\n      {selectedRequesterType && (\n        <RequesterTypeParamsAsync\n          info={requesterTypesAsync}\n          onLoading={() => <span>Loading...</span>}\n          onError={() => <span>Error</span>}\n          onData={({ data: [details] }) => (\n            <div style={{ margin: \"30px 0 20px\" }}>\n              <div\n                className=\"bp3-callout bp3-icon-info-sign bp3-intent-primary\"\n                style={{ margin: \"10px 0 30px\" }}\n              >\n                <h4 className=\"bp3-heading\">Details</h4>\n\n                <p className=\"bp3-text bp3-running-text\">{details.desc}</p>\n              </div>\n              <Formik\n                initialValues={{}}\n                onSubmit={values => {\n                  const results = Object.fromEntries(\n                    Object.entries(details.args).map(\n                      ([param, paramDetails]) => {\n                        return [\n                          param,\n                          {\n                            option_string: (paramDetails as any).option_string,\n                            value: (values as any)[param]\n                          }\n                        ];\n                      }\n                    )\n                  );\n                  createRequester(selectedRequesterType, results);\n                  onFinish();\n                }}\n              >\n                {({\n                  values,\n                  errors,\n                  touched,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  isSubmitting\n                }) => (\n                  <div>\n                    {/* {JSON.stringify(details.args)} */}\n                    {Object.entries(details.args).map(\n                      ([param, details]: [any, any]) => {\n                        return (\n                          <FormGroup\n                            key={param}\n                            label={details.help}\n                            labelInfo={details.option_string}\n                            labelFor=\"test\"\n                          >\n                            <InputGroup\n                              id=\"requester\"\n                              placeholder={\"\"}\n                              name={param}\n                              onBlur={handleBlur}\n                              value={(values as any)[param] || \"\"}\n                              onChange={handleChange}\n                            ></InputGroup>\n                          </FormGroup>\n                        );\n                      }\n                    )}\n                    <Button icon=\"new-person\" onClick={() => handleSubmit()}>\n                      Add new requester account...\n                    </Button>\n                  </div>\n                )}\n              </Formik>\n            </div>\n          )}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction RequesterFormWithData({ onFinish }: { onFinish: any }) {\n  const allRequestersAsync = useAxios<RequesterType>({\n    url: `/launch/options`\n  });\n\n  return (\n    <LaunchOptionsAsync\n      info={allRequestersAsync}\n      onLoading={() => <span>Loading...</span>}\n      onError={() => <span>Error</span>}\n      onData={data => <RequesterForm onFinish={onFinish} data={data as any} />}\n    />\n  );\n}\n\nexport default RequesterFormWithData;\n","import React from \"react\";\nimport BaseWidget from \"./Base\";\nimport { Colors, Icon, Button } from \"@blueprintjs/core\";\nimport { pluralize } from \"../utils\";\nimport cx from \"classnames\";\nimport useAxios from \"axios-hooks\";\nimport { Drawer, Classes, Position, Card } from \"@blueprintjs/core\";\nimport { Requesters, Requester } from \"../models\";\nimport { createAsync } from \"../lib/Async\";\nimport RequesterForm from \"../widgets/components/RequesterForm\";\n\nconst Async = createAsync<Requesters>();\n\nexport default (function PrepareWidget() {\n  const [numProviders, setNumProviders] = React.useState(0);\n  const [numInstalledTasks, setNumInstalledTasks] = React.useState(1);\n  const [requesterDrawerOpen, setRequesterDrawerOpen] = React.useState(false);\n\n  const requesterAsync = useAxios<Requesters>({\n    url: \"requesters\"\n  });\n\n  return (\n    <BaseWidget badge=\"Step 1\" heading={<span>Prepare it</span>}>\n      <>\n        <div className=\"bullet\">\n          <div className=\"bp3-text-large bp3-running-text bp3-text-muted\">\n            <Async\n              info={requesterAsync}\n              onError={({ refetch }) => (\n                <span>\n                  <Icon icon=\"warning-sign\" color={Colors.RED3} /> Something\n                  went wrong.{\" \"}\n                  <a onClick={() => refetch()}>\n                    <strong>Try again</strong>\n                  </a>\n                </span>\n              )}\n              onLoading={() => (\n                <div className=\"bp3-skeleton bp3-text\">&nbsp; </div>\n              )}\n              checkIfEmptyFn={data => data.requesters}\n              onEmptyData={() => (\n                <span>\n                  <Icon icon=\"warning-sign\" color={Colors.ORANGE3} />\n                  {\"  \"}\n                  You have no accounts set up.{\" \"}\n                  <a onClick={() => setRequesterDrawerOpen(true)}>\n                    <strong>Configure</strong>\n                  </a>\n                </span>\n              )}\n              onData={({ data }) => (\n                <span>\n                  <Icon icon=\"people\" /> You have{\" \"}\n                  <a onClick={() => setRequesterDrawerOpen(true)}>\n                    <strong>{data.requesters.length} requester accounts</strong>\n                  </a>{\" \"}\n                  set up\n                </span>\n              )}\n            />\n          </div>\n          <Drawer\n            icon=\"people\"\n            onClose={() => setRequesterDrawerOpen(false)}\n            title=\"Requester accounts\"\n            autoFocus={true}\n            canEscapeKeyClose={true}\n            // canOutsideClickClose={true}\n            enforceFocus={true}\n            hasBackdrop={true}\n            isOpen={requesterDrawerOpen}\n            position={Position.BOTTOM}\n            size={\"72%\"}\n            usePortal={true}\n          >\n            <div\n              className={Classes.DRAWER_BODY}\n              style={{ backgroundColor: Colors.LIGHT_GRAY4 }}\n            >\n              <div className={Classes.DIALOG_BODY}>\n                {requesterAsync[0].data && (\n                  <div>\n                    {requesterAsync[0].data.requesters.map((r: Requester) => (\n                      <div key={r.requester_id} style={{ marginBottom: 12 }}>\n                        <Card interactive={true}>\n                          <Icon\n                            icon={r.registered ? \"tick-circle\" : \"issue\"}\n                            color={r.registered ? Colors.GREEN4 : Colors.GRAY4}\n                            title={\"Registered?\"}\n                          />\n                          <span\n                            style={{ margin: \"0 15px\" }}\n                            className=\"bp3-tag bp3-large bp3-minimal bp3-round step-badge\"\n                          >\n                            {r.provider_type}\n                          </span>\n                          <h4\n                            style={{ display: \"inline\", marginRight: 4 }}\n                            className={cx(\"bp3-heading\", {\n                              \"bp3-text-muted\": !r.registered\n                            })}\n                          >\n                            {r.requester_name}\n                          </h4>{\" \"}\n                          {!r.registered && (\n                            <span>\n                              &mdash; This account still needs to be registered.\n                            </span>\n                          )}\n                        </Card>\n                      </div>\n                    ))}\n                    <div style={{ marginTop: 15 }}>\n                      <RequesterForm\n                        onFinish={() => {\n                          setRequesterDrawerOpen(false);\n                          window.location.reload();\n                        }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </Drawer>\n        </div>\n        <div className=\"bullet\">\n          <div className=\"bp3-text-large bp3-running-text bp3-text-muted\">\n            <Icon icon={numInstalledTasks === 1 ? \"layer\" : \"layers\"} /> You\n            have{\" \"}\n            <strong>\n              {numInstalledTasks} task{\" \"}\n              {pluralize(numInstalledTasks, \"template\")}\n            </strong>\n            {\"  \"}\n            available to use\n          </div>\n        </div>\n      </>\n    </BaseWidget>\n  );\n} as React.FC);\n","export function pluralize(num: Number, word: string, plural?: string): string {\n  if (num === 1) {\n    return word;\n  } else return plural || word + \"s\";\n}\n","import React from \"react\";\nimport { TaskRun } from \"../models\";\nimport { Tag, Intent, Colors } from \"@blueprintjs/core\";\nimport moment from \"moment\";\n\nexport default function TaskRunSummary({ run }: { run: TaskRun }) {\n  return (\n    <div\n      className=\"run-header\"\n      style={{\n        backgroundColor: Colors.LIGHT_GRAY5,\n        padding: 10,\n        marginBottom: \"10px\",\n        borderColor: Colors.GRAY5,\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderRadius: 5\n      }}\n    >\n      <h5 className=\"bp3-heading\" style={{ display: \"inline\" }}>\n        {run.task_name}\n      </h5>{\" \"}\n      &mdash; {moment.utc(run.start_time).fromNow()}\n      {/* <Tag\n        icon=\"play\"\n        intent={Intent.SUCCESS}\n        interactive={false}\n        style={{ float: \"right\", marginLeft: 10 }}\n      >\n        Running\n      </Tag> */}\n      <div className=\"params-list\" style={{ display: \"block\", marginTop: 10 }}>\n        {Object.entries(run.params).map(([key, value]) => (\n          <span\n            key={key}\n            style={{ display: \"inline-block\", marginRight: 5, fontSize: 12 }}\n          >\n            <span className=\"param-name\">{key}</span>=\n            <strong className=\"param-value\">{value}</strong>\n          </span>\n        ))}\n      </div>\n      <div className=\"details\">\n        <div className=\"metrics highlight-first\">\n          <div className=\"metric\">\n            {run.task_status.created + run.task_status.launched}\n            <label>Remaining</label>\n          </div>\n          <div className=\"metric\">\n            {run.task_status.completed +\n              run.task_status.accepted +\n              run.task_status.mixed +\n              run.task_status.rejected}\n            <label>Completed</label>\n          </div>\n          <div className=\"metric\">\n            {run.task_status.launched + run.task_status.assigned}\n            <label>In-Flight</label>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FormGroup, InputGroup, Checkbox } from \"@blueprintjs/core\";\n\nfunction FormField({\n  prefix,\n  onUpdate,\n  field\n}: {\n  prefix: string;\n  onUpdate: any;\n  field: any;\n}) {\n  const id = prefix + \"|\" + field.dest + \"|\" + field.option_string;\n  const dispatch = (value: any) => {\n    onUpdate({\n      [id]: value\n    });\n  };\n\n  React.useEffect(() => {\n    if (field.type === \"bool\") {\n      dispatch(!!field.default); // for bools, type cast the default value\n    } else if (!!field.default) {\n      dispatch(field.default); // for non-bools, just use the uncasted value\n    }\n  }, [field.default]);\n\n  return field.type === \"bool\" ? (\n    <div key={field.dest}>\n      <Checkbox\n        defaultChecked={!!field.default}\n        label={field.dest}\n        onChange={(e: any) => {\n          dispatch(e.target.checked);\n        }}\n      />\n      <p className=\"bp3-text-muted\">{field.help}</p>\n    </div>\n  ) : (\n    <FormGroup label={field.dest} labelInfo={field.help} labelFor={id}>\n      <InputGroup\n        id={id}\n        placeholder={field.default}\n        defaultValue={field.default}\n        onChange={(e: any) => dispatch(e.target.value)}\n      ></InputGroup>\n    </FormGroup>\n  );\n}\n\nexport default FormField;\n","import React from \"react\";\nimport FormField from \"./FormField\";\nimport { Checkbox, Card } from \"@blueprintjs/core\";\n\nfunction OptionsForm({\n  prefix,\n  onUpdate,\n  options\n}: {\n  prefix: string;\n  onUpdate: any;\n  options: any;\n}) {\n  React.useEffect(() => {\n    onUpdate(\"CLEAR_\" + prefix);\n    Object.values(options)\n      .flatMap((opt: any) => Object.values(opt.args))\n      .forEach((field: any) => {\n        const id = prefix + \"|\" + field.dest + \"|\" + field.option_string;\n        onUpdate({\n          [id]: field.default\n        });\n      });\n  }, [options]);\n\n  return (\n    <div>\n      <div style={{ margin: \"20px 0\" }}>\n        <Card className=\"bp3-elevation-2\">\n          {Object.values(options)\n            .flatMap((opt: any) => Object.values(opt.args))\n            .map((field: any) => {\n              return (\n                <FormField\n                  key={prefix + field.dest}\n                  prefix={prefix}\n                  onUpdate={onUpdate}\n                  field={field}\n                />\n              );\n            })}\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default OptionsForm;\n","import React from \"react\";\nimport { Select, ItemRenderer } from \"@blueprintjs/select\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { createAsync } from \"../../lib/Async\";\nimport useAxios from \"axios-hooks\";\nimport FormField from \"./FormField\";\nimport OptionsForm from \"./OptionsForm\";\n\ntype IBlueprint = {\n  name: string;\n  rank: number;\n};\n\ntype BlueprintParams = any;\n\nconst BlueprintSelect = Select.ofType<IBlueprint>();\nconst BlueprintParamsAsync = createAsync<BlueprintParams>();\n\nconst renderBlueprintItem: ItemRenderer<IBlueprint> = (\n  blueprint,\n  { handleClick, modifiers, query }\n) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n  const text = `${blueprint.rank}. ${blueprint.name}`;\n  return (\n    <MenuItem\n      active={modifiers.active}\n      disabled={modifiers.disabled}\n      key={blueprint.rank}\n      onClick={handleClick}\n      text={highlightText(text, query)}\n    />\n  );\n};\n\nexport default function BlueprintSelectComponent<T>({\n  data,\n  onUpdate\n}: {\n  data: IBlueprint[];\n  onUpdate: Function;\n}) {\n  const [selected, setSelected] = React.useState<IBlueprint | null>(null);\n  const paramsInfo = useAxios({\n    url: `blueprint/${selected?.name || \"none\"}/options`\n  });\n\n  return (\n    <div>\n      <BlueprintSelect\n        items={data}\n        itemRenderer={renderBlueprintItem}\n        onItemSelect={(blueprint: IBlueprint) => {\n          onUpdate({ blueprint: blueprint.name });\n          setSelected(blueprint);\n        }}\n        activeItem={selected}\n      >\n        <Button icon=\"map\" rightIcon=\"caret-down\">\n          {selected ? selected.name : \"Pick a blueprint...\"}\n        </Button>\n      </BlueprintSelect>\n      {selected && (\n        <BlueprintParamsAsync\n          info={paramsInfo}\n          onLoading={() => <span>Loading...</span>}\n          onError={() => <span>Error</span>}\n          onData={({ data }) => (\n            <OptionsForm\n              onUpdate={onUpdate}\n              options={data.options}\n              prefix=\"bp\"\n            />\n          )}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction escapeRegExpChars(text: string) {\n  return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\nfunction highlightText(text: string, query: string) {\n  let lastIndex = 0;\n  const words = query\n    .split(/\\s+/)\n    .filter(word => word.length > 0)\n    .map(escapeRegExpChars);\n  if (words.length === 0) {\n    return [text];\n  }\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\n  const tokens: React.ReactNode[] = [];\n  while (true) {\n    const match = regexp.exec(text);\n    if (!match) {\n      break;\n    }\n    const length = match[0].length;\n    const before = text.slice(lastIndex, regexp.lastIndex - length);\n    if (before.length > 0) {\n      tokens.push(before);\n    }\n    lastIndex = regexp.lastIndex;\n    tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n  }\n  const rest = text.slice(lastIndex);\n  if (rest.length > 0) {\n    tokens.push(rest);\n  }\n  return tokens;\n}\n","import React from \"react\";\nimport {\n  Card,\n  Colors,\n  Icon,\n  FormGroup,\n  InputGroup,\n  Checkbox\n} from \"@blueprintjs/core\";\nimport useAxios from \"axios-hooks\";\nimport { createAsync } from \"../../lib/Async\";\nimport OptionsForm from \"./OptionsForm\";\n\ntype ArchitectParams = any;\nconst ArchitectParamsAsync = createAsync<ArchitectParams>();\n\nexport default function ArchitectSelect({\n  data,\n  onUpdate\n}: {\n  data: any;\n  onUpdate: Function;\n}) {\n  const [selected, setSelected] = React.useState(null);\n  const paramsInfo = useAxios({\n    url: `architect/${selected || \"none\"}/options`\n  });\n\n  return (\n    <div>\n      {data.map((arch: any) => (\n        <Card\n          key={arch}\n          interactive={arch !== selected}\n          style={{\n            marginBottom: 10,\n            backgroundColor: arch === selected ? undefined : undefined\n          }}\n          onClick={() => {\n            setSelected(arch);\n            onUpdate({ architect: arch });\n          }}\n        >\n          <Icon\n            icon={arch === selected ? \"tick-circle\" : \"circle\"}\n            color={arch === selected ? Colors.GREEN4 : Colors.GRAY4}\n            title={\"Selected\"}\n            style={{ marginRight: 10 }}\n          />\n          {arch}\n        </Card>\n      ))}\n      {selected && (\n        <ArchitectParamsAsync\n          info={paramsInfo}\n          onLoading={() => <span>Loading...</span>}\n          onError={() => <span>Error</span>}\n          onData={({ data }) => (\n            <OptionsForm\n              onUpdate={onUpdate}\n              options={data.options}\n              prefix=\"arch\"\n            />\n          )}\n        />\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Select, ItemRenderer } from \"@blueprintjs/select\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { Requester } from \"../../models\";\n\ntype IRequester = Requester;\n\nconst RequesterSelect = Select.ofType<IRequester>();\n\nconst renderRequesterItem: ItemRenderer<IRequester> = (\n  requester,\n  { handleClick, modifiers, query }\n) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n  const text = `${requester.requester_id}. ${requester.requester_name}`;\n  return (\n    <MenuItem\n      active={modifiers.active}\n      disabled={modifiers.disabled}\n      key={requester.requester_id}\n      onClick={handleClick}\n      text={highlightText(text, query)}\n    />\n  );\n};\n\nexport default function RequesterSelectComponent<T>({\n  data,\n  onUpdate\n}: {\n  data: IRequester[];\n  onUpdate: Function;\n}) {\n  const [selected, setSelected] = React.useState<IRequester | null>(null);\n  return (\n    <div>\n      <RequesterSelect\n        items={data}\n        itemRenderer={renderRequesterItem}\n        onItemSelect={(requester: IRequester) => {\n          onUpdate({ requester: requester.requester_name });\n          setSelected(requester);\n        }}\n        activeItem={selected}\n      >\n        <Button icon=\"map\" rightIcon=\"caret-down\">\n          {selected ? selected.requester_name : \"Pick a requester...\"}\n        </Button>\n      </RequesterSelect>\n    </div>\n  );\n}\n\nfunction escapeRegExpChars(text: string) {\n  return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\nfunction highlightText(text: string, query: string) {\n  let lastIndex = 0;\n  const words = query\n    .split(/\\s+/)\n    .filter(word => word.length > 0)\n    .map(escapeRegExpChars);\n  if (words.length === 0) {\n    return [text];\n  }\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\n  const tokens: React.ReactNode[] = [];\n  while (true) {\n    const match = regexp.exec(text);\n    if (!match) {\n      break;\n    }\n    const length = match[0].length;\n    const before = text.slice(lastIndex, regexp.lastIndex - length);\n    if (before.length > 0) {\n      tokens.push(before);\n    }\n    lastIndex = regexp.lastIndex;\n    tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n  }\n  const rest = text.slice(lastIndex);\n  if (rest.length > 0) {\n    tokens.push(rest);\n  }\n  return tokens;\n}\n","import { Position, Toaster } from \"@blueprintjs/core\";\n\nlet toaster = Toaster.create({ position: Position.BOTTOM_LEFT });\n\nexport { toaster };\n","import React from \"react\";\nimport BaseWidget from \"./Base\";\nimport useAxios from \"axios-hooks\";\nimport { TaskRun, RunningTasks } from \"../models\";\nimport { task_runs__running } from \"../mocks\";\nimport {\n  Colors,\n  Icon,\n  Drawer,\n  Position,\n  Classes,\n  Card,\n  Button,\n  Intent,\n  Toaster\n} from \"@blueprintjs/core\";\nimport { createAsync, mockRequest } from \"../lib/Async\";\nimport TaskRunSummary from \"./TaskRunSummary\";\nimport BlueprintSelect from \"./components/BlueprintSelect\";\nimport ArchitectSelect from \"./components/ArchitectSelect\";\nimport RequesterSelect from \"./components/RequesterSelect\";\nimport { toaster } from \"../lib/toaster\";\nimport { launchTask } from \"../service\";\nimport OptionsForm from \"./components/OptionsForm\";\n\nconst Async = createAsync<RunningTasks>();\nconst LaunchInfoAsync = createAsync<any>();\nconst RequesterInfoAsync = createAsync<any>();\nconst DefaultTaskInfoAsync = createAsync<any>();\n\nexport default (function LaunchWidget() {\n  // const runningTasksAsync = mockRequest<RunningTasks>(task_runs__running);\n  const runningTasksAsync = useAxios({ url: \"task_runs/running\" });\n\n  return (\n    <BaseWidget badge=\"Step 2\" heading={<span>Launch it</span>}>\n      <Async\n        info={runningTasksAsync}\n        onLoading={() => (\n          <div className=\"bp3-non-ideal-state bp3-skeleton\">\n            <div\n              className=\"bp3-non-ideal-state-visual\"\n              style={{ fontSize: 20 }}\n            >\n              <span className=\"bp3-icon bp3-icon-clean\"></span>\n            </div>\n            <div>You have no tasks running.</div>\n          </div>\n        )}\n        onData={({ data }) => (\n          <div>\n            {data.task_runs.map((run: TaskRun) => (\n              <TaskRunSummary key={run.task_run_id} run={run} />\n            ))}\n          </div>\n        )}\n        checkIfEmptyFn={data => data.task_runs}\n        onEmptyData={() => (\n          <div className=\"bp3-non-ideal-state\">\n            <div\n              className=\"bp3-non-ideal-state-visual\"\n              style={{ fontSize: 20 }}\n            >\n              <span className=\"bp3-icon bp3-icon-clean\"></span>\n            </div>\n            <div>You have no tasks running.</div>\n          </div>\n        )}\n        onError={({ refetch }) => (\n          <span>\n            <Icon icon=\"warning-sign\" color={Colors.RED3} /> Something went\n            wrong.{\" \"}\n            <a onClick={() => refetch()}>\n              <strong>Try again</strong>\n            </a>\n          </span>\n        )}\n      />\n      <div>\n        <div style={{ textAlign: \"center\", marginTop: 15 }}>\n          <LaunchForm />\n        </div>\n      </div>\n    </BaseWidget>\n  );\n} as React.FC);\n\nfunction LaunchForm() {\n  const [openForm, setOpenForm] = React.useState(false);\n  const launchInfo = useAxios({ url: \"launch/options\" });\n  const requesterInfo = useAxios({\n    url: \"requesters\"\n  });\n  const defaultTaskInfo = useAxios({\n    url: \"task_runs/options\"\n  });\n\n  const [params, addToParams] = React.useReducer((state, params) => {\n    let nextState;\n    if (params === \"CLEAR_ALL\") {\n      nextState = {};\n    } else if (params === \"CLEAR_bp\") {\n      nextState = Object.keys(state)\n        .filter(key => !key.startsWith(\"bp|\"))\n        .reduce((obj: any, key: string) => {\n          obj[key] = state[key];\n          return obj;\n        }, {});\n    } else if (params === \"CLEAR_arch\") {\n      nextState = Object.keys(state)\n        .filter(key => !key.startsWith(\"arch|\"))\n        .reduce((obj: any, key: string) => {\n          obj[key] = state[key];\n          return obj;\n        }, {});\n    } else if (params === \"CLEAR_task\") {\n      nextState = Object.keys(state)\n        .filter(key => !key.startsWith(\"task|\"))\n        .reduce((obj: any, key: string) => {\n          obj[key] = state[key];\n          return obj;\n        }, {});\n    } else {\n      nextState = { ...state, ...params };\n    }\n    return nextState;\n  }, {});\n\n  return (\n    <div>\n      <button className=\"bp3-button\" onClick={() => setOpenForm(true)}>\n        Launch a task\n      </button>\n      <Drawer\n        icon=\"people\"\n        onClose={() => setOpenForm(false)}\n        title=\"Launch a task\"\n        autoFocus={true}\n        canEscapeKeyClose={false}\n        canOutsideClickClose={false}\n        enforceFocus={true}\n        hasBackdrop={true}\n        isOpen={openForm}\n        position={Position.RIGHT}\n        size={\"50%\"}\n        usePortal={true}\n      >\n        <div\n          className={Classes.DRAWER_BODY}\n          style={{ backgroundColor: Colors.LIGHT_GRAY4 }}\n        >\n          <div className={Classes.DIALOG_BODY}>\n            <h2>Step 1. Choose a Task Blueprint</h2>\n            <p className=\"bp3-text-muted\">\n              A blueprint defines the task that will be run &amp; its associated\n              configuration parameters.\n            </p>\n            <LaunchInfoAsync\n              info={launchInfo}\n              onLoading={() => <span>Loading...</span>}\n              onData={({ data }) => (\n                <div>\n                  <BlueprintSelect\n                    data={data.blueprint_types}\n                    onUpdate={(data: any) => addToParams(data)}\n                  />\n                </div>\n              )}\n              onError={() => <span>Error</span>}\n            />\n\n            <h2>Step 2. Choose an Architect</h2>\n            <p className=\"bp3-text-muted\">\n              An architect manages the deployment target of your task.\n            </p>\n            <LaunchInfoAsync\n              info={launchInfo}\n              onLoading={() => <span>Loading...</span>}\n              onData={({ data }) => (\n                <div>\n                  <ArchitectSelect\n                    data={data.architect_types}\n                    onUpdate={(data: any) => {\n                      addToParams(data);\n                    }}\n                  />\n                </div>\n              )}\n              onError={() => <span>Error</span>}\n            />\n            <h2>Step 3. Choose a Requester</h2>\n            <p className=\"bp3-text-muted\">\n              A requester is the service account that will run your task.\n            </p>\n            <RequesterInfoAsync\n              info={requesterInfo}\n              onLoading={() => <span>Loading...</span>}\n              onData={({ data }) => (\n                <div>\n                  <RequesterSelect\n                    data={data.requesters.filter((r: any) => r.registered)}\n                    onUpdate={(data: any) => {\n                      addToParams(data);\n                    }}\n                  />\n                </div>\n              )}\n              onError={() => <span>Error</span>}\n            />\n            <h2>Step 4. Final Task Options</h2>\n            <DefaultTaskInfoAsync\n              info={defaultTaskInfo}\n              onLoading={() => <span>Loading...</span>}\n              onData={({ data }) => (\n                <div>\n                  <OptionsForm\n                    prefix=\"task\"\n                    options={data.options}\n                    onUpdate={(data: any) => addToParams(data)}\n                  />\n                </div>\n              )}\n              onError={() => <span>Error</span>}\n            />\n\n            <Button\n              onClick={() => {\n                let validated =\n                  params.blueprint !== undefined &&\n                  params.architect !== undefined &&\n                  params.requester !== undefined;\n\n                const allTaskParamsFilled = Object.entries(params).reduce(\n                  (allFilled, [key, value]) => {\n                    if (key.startsWith(\"task|\")) {\n                      return allFilled && value !== null;\n                    } else {\n                      return allFilled;\n                    }\n                  },\n                  true\n                );\n\n                validated = validated && allTaskParamsFilled;\n\n                if (validated) {\n                  addToParams(\"CLEAR_ALL\");\n\n                  launchTask(params)\n                    .then(() => {\n                      setOpenForm(false);\n\n                      toaster.dismiss(\"loading-msg\");\n                      toaster.show({\n                        message: \"Launched!\",\n                        icon: \"cloud-upload\",\n                        intent: Intent.SUCCESS,\n                        timeout: 3000\n                      });\n                    })\n                    .catch(() => {\n                      // TODO: Handle error, also check payload in case\n                      // it specifies an error, e.g. ensure that\n                      // payload.status === 'success'\n                    });\n\n                  toaster.show(\n                    {\n                      message:\n                        \"Launching task... Please wait this may take a while.\",\n                      icon: \"cloud-upload\",\n                      intent: Intent.NONE,\n                      timeout: 40000\n                    },\n                    \"loading-msg\"\n                  );\n                } else {\n                  toaster.show({\n                    message:\n                      \"Error: Must select Blueprint + Architect + Requester and fill all task params\",\n                    icon: \"cloud-upload\",\n                    intent: Intent.DANGER,\n                    timeout: 2000\n                  });\n                }\n              }}\n              large\n              icon=\"cloud-upload\"\n              intent={Intent.SUCCESS}\n              style={{ margin: \"20px auto 0\" }}\n            >\n              Launch\n            </Button>\n          </div>\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport BaseWidget from \"./Base\";\nimport useAxios from \"axios-hooks\";\nimport { createAsync, mockRequest } from \"../lib/Async\";\nimport { Icon, Colors } from \"@blueprintjs/core\";\nimport { ReviewableTasks } from \"../models\";\nimport TaskRunSummary from \"./TaskRunSummary\";\n\nconst Async = createAsync<ReviewableTasks>();\n\nexport default (function ReviewWidget() {\n  const reviewAsync = useAxios({\n    url: \"task_runs/reviewable\"\n  });\n\n  return (\n    <BaseWidget badge=\"Step 3\" heading={<span>Review it</span>}>\n      <Async\n        info={reviewAsync}\n        onLoading={() => (\n          <div className=\"bp3-skeleton\">\n            <div className=\"bp3-non-ideal-state\">\n              <div\n                className=\"bp3-non-ideal-state-visual\"\n                style={{ fontSize: 20 }}\n              >\n                <span className=\"bp3-icon bp3-icon-inbox-search\"></span>\n              </div>\n              <div>You have no work to review.</div>\n            </div>\n          </div>\n        )}\n        onError={({ refetch }) => (\n          <span>\n            <Icon icon=\"warning-sign\" color={Colors.RED3} /> Something went\n            wrong.{\" \"}\n            <a onClick={() => refetch()}>\n              <strong>Try again</strong>\n            </a>\n          </span>\n        )}\n        onData={({ data }) => (\n          <span>\n            {data.task_runs.map(run => (\n              <TaskRunSummary key={run.task_run_id} run={run} />\n            ))}\n          </span>\n        )}\n        checkIfEmptyFn={data => data.task_runs}\n        onEmptyData={() => (\n          <div>\n            <div className=\"bp3-non-ideal-state\">\n              <div\n                className=\"bp3-non-ideal-state-visual\"\n                style={{ fontSize: 20 }}\n              >\n                <span className=\"bp3-icon bp3-icon-inbox-search\"></span>\n              </div>\n              <div>You have no work to review.</div>\n            </div>\n          </div>\n        )}\n      />\n    </BaseWidget>\n  );\n} as React.FC);\n","import React from \"react\";\nimport \"./App.css\";\nimport PrepareWidget from \"./widgets/Prepare\";\nimport LaunchWidget from \"./widgets/Launch\";\nimport ReviewWidget from \"./widgets/Review\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"above-the-fold\"></div>\n      <header>\n        <h1 className=\"bp3-heading\">mephisto</h1>\n        <em\n          className=\"bp3-italics bp3-text-large bp3-text-disabled\"\n          style={{ position: \"relative\", top: -8 }}\n        >\n          crowdsourcing without the tears\n        </em>\n      </header>\n      <div className=\"container\">\n        <PrepareWidget />\n        <LaunchWidget />\n        <ReviewWidget />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\nimport \"./axios\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}