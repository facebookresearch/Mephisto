{"version":3,"sources":["widgets/Base.tsx","lib/Async.ts","widgets/Prepare.tsx","utils.ts","mocks.ts","widgets/TaskRunSummary.tsx","widgets/components/FormField.tsx","widgets/components/BlueprintSelect.tsx","widgets/components/ArchitectSelect.tsx","lib/toaster.ts","widgets/Launch.tsx","widgets/Review.tsx","App.tsx","axios.ts","index.tsx"],"names":["children","heading","badge","elevation","Elevation","THREE","className","style","marginBottom","undefined","isEmpty","require","createAsync","Async","info","onLoading","onError","onData","onEmptyData","checkIfEmptyFn","data","loading","error","baseProps","refetch","axiosInfo","response","dataToCheckIfEmpty","word","plural","React","useState","numInstalledTasks","requesterDrawerOpen","setRequesterDrawerOpen","requesterAsync","useAxios","url","Base","icon","color","Colors","RED3","onClick","requesters","ORANGE3","length","onClose","title","autoFocus","canEscapeKeyClose","enforceFocus","hasBackdrop","isOpen","position","Position","BOTTOM","size","usePortal","Classes","DRAWER_BODY","backgroundColor","LIGHT_GRAY4","DIALOG_BODY","map","r","key","requester_id","interactive","registered","GREEN4","GRAY4","margin","provider_type","display","marginRight","cx","requester_name","marginTop","disabled","task_runs__running","live_task_count","task_count","task_runs","param_string","params","status","sandbox","start_time","task_id","task_name","task_run_id","task_status","accepted","assigned","completed","created","expired","launched","mixed","rejected","task_type","TaskRunSummary","run","LIGHT_GRAY5","padding","borderColor","GRAY5","borderWidth","borderStyle","borderRadius","moment","fromNow","intent","Intent","SUCCESS","float","marginLeft","FormField","prefix","onUpdate","field","id","name","dispatch","value","useEffect","default","label","dest","labelInfo","help","labelFor","placeholder","defaultValue","onChange","e","target","BlueprintSelect","Select","ofType","BlueprintParamsAsync","renderBlueprintItem","blueprint","handleClick","modifiers","query","matchesPredicate","text","rank","active","highlightText","BlueprintSelectComponent","selected","setSelected","console","log","paramsInfo","items","itemRenderer","onItemSelect","activeItem","rightIcon","Object","values","options","flatMap","opt","args","escapeRegExpChars","replace","lastIndex","words","split","filter","regexp","RegExp","join","tokens","match","exec","before","slice","push","rest","ArchitectSelect","arch","toaster","Toaster","create","BOTTOM_LEFT","LaunchInfoAsync","runningTasksAsync","mockData","mockRequest","fontSize","textAlign","LaunchForm","openForm","setOpenForm","launchInfo","useReducer","state","addToParams","canOutsideClickClose","RIGHT","blueprint_types","architect_types","show","message","NONE","timeout","setTimeout","large","reviewAsync","JSON","stringify","App","top","Prepare","Launch","Review","axios","Axios","baseURL","interceptors","request","use","config","delayed","Promise","resolve","configure","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6ff4520.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Elevation } from \"@blueprintjs/core\";\n\ninterface BaseProps {\n  heading: React.ReactElement;\n  badge: string | undefined;\n}\n\nexport default (function BaseWidget({ children, heading, badge }) {\n  return (\n    <Card elevation={Elevation.THREE} className=\"widget\">\n      <h4 className=\"bp3-heading\" style={{ marginBottom: 15 }}>\n        {badge !== undefined && (\n          <span className=\"bp3-tag bp3-large bp3-minimal bp3-round step-badge\">\n            {badge}\n          </span>\n        )}\n        {heading}\n      </h4>\n      {children}\n    </Card>\n  );\n} as React.FC<BaseProps>);\n","import React from \"react\";\nimport { AxiosPromise, AxiosRequestConfig } from \"axios\";\nimport { ResponseValues, RefetchOptions } from \"axios-hooks\";\nconst isEmpty = require(\"lodash.isempty\");\n\ntype AxiosInfo<T> =\n  | [\n      ResponseValues<T>,\n      (config?: AxiosRequestConfig, options?: RefetchOptions) => AxiosPromise<T>\n    ]\n  | [ResponseValues<T>];\n\ntype BaseAsyncProps<T> = {\n  axiosInfo: AxiosInfo<T>;\n  refetch: Function;\n};\n\ntype AsyncProps<T> = {\n  info: AxiosInfo<T>;\n  onLoading: React.FC<BaseAsyncProps<T>>;\n  onError: React.FC<{ error: any } & BaseAsyncProps<T>>;\n  onData: React.FC<{ data: T } & BaseAsyncProps<T>>;\n  onEmptyData?: React.FC<{ data: T } & BaseAsyncProps<T>>;\n  checkIfEmptyFn?: (data: T) => any;\n};\n\nexport type AsyncComponent<T = any> = React.FC<AsyncProps<T>>;\n\nexport function createAsync<T>() {\n  return Async as AsyncComponent<T>;\n}\n\nconst Async: AsyncComponent = ({\n  info,\n  onLoading,\n  onError,\n  onData,\n  onEmptyData,\n  checkIfEmptyFn: checkIfEmptyFn\n}) => {\n  const [{ data, loading, error }, refetch = () => {}] = info;\n\n  const baseProps: BaseAsyncProps<any> = { refetch, axiosInfo: info };\n\n  if (loading) return onLoading({ ...baseProps });\n  else if (error) return onError({ error: error.response?.data, ...baseProps });\n\n  const dataToCheckIfEmpty =\n    checkIfEmptyFn !== undefined ? checkIfEmptyFn(data) : data;\n  const dataIsEmpty = isEmpty(dataToCheckIfEmpty);\n\n  if (dataIsEmpty && onEmptyData !== undefined)\n    return onEmptyData({ data, ...baseProps });\n  else return onData({ data, ...baseProps });\n};\n\nexport default Async;\n\nexport function mockRequest<T>(\n  mockData: T,\n  error: any = undefined,\n  loading: boolean = false\n) {\n  const request = {\n    data: mockData,\n    loading,\n    error: error && { response: { data: error } }\n  } as ResponseValues<T>;\n  return [request, () => {}] as [ResponseValues<T>, any];\n}\n","import React from \"react\";\nimport BaseWidget from \"./Base\";\nimport { Colors, Icon, Button } from \"@blueprintjs/core\";\nimport { pluralize } from \"../utils\";\nimport cx from \"classnames\";\nimport useAxios from \"axios-hooks\";\nimport { Drawer, Classes, Position, Card } from \"@blueprintjs/core\";\nimport { Requesters, Requester } from \"../models\";\nimport { createAsync } from \"../lib/Async\";\n\nconst Async = createAsync<Requesters>();\n\nexport default (function PrepareWidget() {\n  const [numProviders, setNumProviders] = React.useState(0);\n  const [numInstalledTasks, setNumInstalledTasks] = React.useState(1);\n  const [requesterDrawerOpen, setRequesterDrawerOpen] = React.useState(false);\n\n  const requesterAsync = useAxios<Requesters>({\n    url: \"requesters\"\n  });\n\n  return (\n    <BaseWidget badge=\"Step 1\" heading={<span>Prepare it</span>}>\n      <>\n        <div className=\"bullet\">\n          <div className=\"bp3-text-large bp3-running-text bp3-text-muted\">\n            <Async\n              info={requesterAsync}\n              onError={({ refetch }) => (\n                <span>\n                  <Icon icon=\"warning-sign\" color={Colors.RED3} /> Something\n                  went wrong.{\" \"}\n                  <a onClick={() => refetch()}>\n                    <strong>Try again</strong>\n                  </a>\n                </span>\n              )}\n              onLoading={() => (\n                <div className=\"bp3-skeleton bp3-text\">&nbsp; </div>\n              )}\n              checkIfEmptyFn={data => data.requesters}\n              onEmptyData={() => (\n                <span>\n                  <Icon icon=\"warning-sign\" color={Colors.ORANGE3} />\n                  {\"  \"}\n                  You have no accounts set up.{\" \"}\n                  <a>\n                    <strong>Configure</strong>\n                  </a>\n                </span>\n              )}\n              onData={({ data }) => (\n                <span>\n                  <Icon icon=\"people\" /> You have{\" \"}\n                  <a onClick={() => setRequesterDrawerOpen(true)}>\n                    <strong>{data.requesters.length} requester accounts</strong>\n                  </a>{\" \"}\n                  set up\n                </span>\n              )}\n            />\n          </div>\n          <Drawer\n            icon=\"people\"\n            onClose={() => setRequesterDrawerOpen(false)}\n            title=\"Requester accounts\"\n            autoFocus={true}\n            canEscapeKeyClose={true}\n            // canOutsideClickClose={true}\n            enforceFocus={true}\n            hasBackdrop={true}\n            isOpen={requesterDrawerOpen}\n            position={Position.BOTTOM}\n            size={\"72%\"}\n            usePortal={true}\n          >\n            <div\n              className={Classes.DRAWER_BODY}\n              style={{ backgroundColor: Colors.LIGHT_GRAY4 }}\n            >\n              <div className={Classes.DIALOG_BODY}>\n                {requesterAsync[0].data && (\n                  <div>\n                    {requesterAsync[0].data.requesters.map((r: Requester) => (\n                      <div key={r.requester_id} style={{ marginBottom: 12 }}>\n                        <Card interactive={true}>\n                          <Icon\n                            icon={r.registered ? \"tick-circle\" : \"issue\"}\n                            color={r.registered ? Colors.GREEN4 : Colors.GRAY4}\n                            title={\"Registered?\"}\n                          />\n                          <span\n                            style={{ margin: \"0 15px\" }}\n                            className=\"bp3-tag bp3-large bp3-minimal bp3-round step-badge\"\n                          >\n                            {r.provider_type}\n                          </span>\n                          <h4\n                            style={{ display: \"inline\", marginRight: 4 }}\n                            className={cx(\"bp3-heading\", {\n                              \"bp3-text-muted\": !r.registered\n                            })}\n                          >\n                            {r.requester_name}\n                          </h4>{\" \"}\n                          {!r.registered && (\n                            <span>\n                              &mdash; This account still needs to be registered.\n                            </span>\n                          )}\n                        </Card>\n                      </div>\n                    ))}\n                    <div style={{ marginTop: 15 }}>\n                      <Button disabled icon=\"new-person\">\n                        [TODO] Add a new requester account...\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </Drawer>\n        </div>\n        <div className=\"bullet\">\n          <div className=\"bp3-text-large bp3-running-text bp3-text-muted\">\n            <Icon icon={numInstalledTasks === 1 ? \"layer\" : \"layers\"} /> You\n            have{\" \"}\n            <strong>\n              {numInstalledTasks} task{\" \"}\n              {pluralize(numInstalledTasks, \"template\")}\n            </strong>\n            {\"  \"}\n            available to use\n          </div>\n        </div>\n      </>\n    </BaseWidget>\n  );\n} as React.FC);\n","export function pluralize(num: Number, word: string, plural?: string): string {\n  if (num === 1) {\n    return word;\n  } else return plural || word + \"s\";\n}\n","import { TaskRun, RunningTasks } from \"./models\";\n\nexport const task_runs__running: RunningTasks = {\n  live_task_count: 1,\n  task_count: 1,\n  task_runs: [\n    {\n      param_string:\n        \"--test --task --run --test --task --run --test --task --run --test --task --run --test --task --run --test --task --run --test --task --run --test --task --run --test --task --run \",\n      params: {\n        \"run params\": \"Coming soon!\",\n        status: \"Not yet implemented\"\n      },\n      sandbox: false,\n      start_time: \"2019-12-09 22:53:30\",\n      task_id: \"1\",\n      task_name: \"test_task\",\n      task_run_id: \"1\",\n      task_status: {\n        accepted: 0,\n        assigned: 0,\n        completed: 0,\n        created: 3,\n        expired: 0,\n        launched: 0,\n        mixed: 0,\n        rejected: 0\n      },\n      task_type: \"mock\"\n    }\n  ]\n};\n","import React from \"react\";\nimport { TaskRun } from \"../models\";\nimport { Tag, Intent, Colors } from \"@blueprintjs/core\";\nimport moment from \"moment\";\n\nexport default function TaskRunSummary({ run }: { run: TaskRun }) {\n  return (\n    <div\n      className=\"run-header\"\n      style={{\n        backgroundColor: Colors.LIGHT_GRAY5,\n        padding: 10,\n        marginBottom: \"10px\",\n        borderColor: Colors.GRAY5,\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderRadius: 5\n      }}\n    >\n      <h5 className=\"bp3-heading\" style={{ display: \"inline\" }}>\n        {run.task_name}\n      </h5>{\" \"}\n      &mdash; {moment(run.start_time).fromNow()}\n      <Tag\n        icon=\"play\"\n        intent={Intent.SUCCESS}\n        interactive={false}\n        style={{ float: \"right\", marginLeft: 10 }}\n      >\n        Running\n      </Tag>\n      <code\n        className=\"bp3-code params-list\"\n        style={{ display: \"block\", marginTop: 10 }}\n      >\n        {run.param_string}\n      </code>\n      <div className=\"details\">\n        <div className=\"metrics highlight-first\">\n          <div className=\"metric\">\n            {run.task_status.created + run.task_status.launched}\n            <label>Remaining</label>\n          </div>\n          <div className=\"metric\">\n            {run.task_status.completed +\n              run.task_status.accepted +\n              run.task_status.mixed +\n              run.task_status.rejected}\n            <label>Completed</label>\n          </div>\n          <div className=\"metric\">\n            {run.task_status.launched + run.task_status.assigned}\n            <label>In-Flight</label>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FormGroup, InputGroup } from \"@blueprintjs/core\";\n\nfunction FormField({\n  prefix,\n  onUpdate,\n  field\n}: {\n  prefix: string;\n  onUpdate: any;\n  field: any;\n}) {\n  const id = prefix + \"-\" + field.name;\n  const dispatch = (value: any) => {\n    onUpdate({\n      [id]: value\n    });\n  };\n\n  React.useEffect(() => {\n    if (!!field.default) {\n      dispatch(field.default);\n    }\n  }, [field.default]);\n\n  return (\n    <FormGroup label={field.dest} labelInfo={field.help} labelFor={id}>\n      <InputGroup\n        id={id}\n        placeholder={field.default}\n        defaultValue={field.default}\n        onChange={(e: any) => dispatch(e.target.value)}\n      ></InputGroup>\n    </FormGroup>\n  );\n}\n\nexport default FormField;\n","import React from \"react\";\nimport { Select, ItemRenderer } from \"@blueprintjs/select\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { createAsync } from \"../../lib/Async\";\nimport useAxios from \"axios-hooks\";\nimport FormField from \"./FormField\";\n\ntype IBlueprint = {\n  name: string;\n  rank: number;\n};\n\ntype BlueprintParams = any;\n\nconst BlueprintSelect = Select.ofType<IBlueprint>();\nconst BlueprintParamsAsync = createAsync<BlueprintParams>();\n\nconst renderBlueprintItem: ItemRenderer<IBlueprint> = (\n  blueprint,\n  { handleClick, modifiers, query }\n) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n  const text = `${blueprint.rank}. ${blueprint.name}`;\n  return (\n    <MenuItem\n      active={modifiers.active}\n      disabled={modifiers.disabled}\n      key={blueprint.rank}\n      onClick={handleClick}\n      text={highlightText(text, query)}\n    />\n  );\n};\n\nexport default function BlueprintSelectComponent<T>({\n  data,\n  onUpdate\n}: {\n  data: IBlueprint[];\n  onUpdate: Function;\n}) {\n  const [selected, setSelected] = React.useState<IBlueprint | null>(null);\n  console.log(selected);\n  const paramsInfo = useAxios({\n    url: `blueprint/${selected?.name || \"none\"}/options`\n  });\n\n  return (\n    <div>\n      <BlueprintSelect\n        items={data}\n        itemRenderer={renderBlueprintItem}\n        onItemSelect={(blueprint: IBlueprint) => {\n          onUpdate({ blueprint: blueprint.name });\n          setSelected(blueprint);\n        }}\n        activeItem={selected}\n      >\n        <Button icon=\"map\" rightIcon=\"caret-down\">\n          {selected ? selected.name : \"Pick a blueprint...\"}\n        </Button>\n      </BlueprintSelect>\n      {selected && (\n        <BlueprintParamsAsync\n          info={paramsInfo}\n          onLoading={() => <span>Loading...</span>}\n          onError={() => <span>Error</span>}\n          onData={({ data }) => (\n            <div style={{ margin: \"20px 0\" }}>\n              {Object.values(data.options)\n                .flatMap((opt: any) => Object.values(opt.args))\n                .map((field: any) => (\n                  <FormField\n                    prefix={\"bp\" + field.dest}\n                    onUpdate={onUpdate}\n                    field={field}\n                  />\n                ))}\n            </div>\n          )}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction escapeRegExpChars(text: string) {\n  return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\nfunction highlightText(text: string, query: string) {\n  let lastIndex = 0;\n  const words = query\n    .split(/\\s+/)\n    .filter(word => word.length > 0)\n    .map(escapeRegExpChars);\n  if (words.length === 0) {\n    return [text];\n  }\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\n  const tokens: React.ReactNode[] = [];\n  while (true) {\n    const match = regexp.exec(text);\n    if (!match) {\n      break;\n    }\n    const length = match[0].length;\n    const before = text.slice(lastIndex, regexp.lastIndex - length);\n    if (before.length > 0) {\n      tokens.push(before);\n    }\n    lastIndex = regexp.lastIndex;\n    tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n  }\n  const rest = text.slice(lastIndex);\n  if (rest.length > 0) {\n    tokens.push(rest);\n  }\n  return tokens;\n}\n","import React from \"react\";\nimport { Card, Colors, Icon, FormGroup, InputGroup } from \"@blueprintjs/core\";\nimport useAxios from \"axios-hooks\";\nimport { createAsync } from \"../../lib/Async\";\n\ntype ArchitectParams = any;\nconst BlueprintParamsAsync = createAsync<ArchitectParams>();\n\nexport default function ArchitectSelect({\n  data,\n  onUpdate\n}: {\n  data: any;\n  onUpdate: Function;\n}) {\n  const [selected, setSelected] = React.useState(null);\n  const paramsInfo = useAxios({\n    url: `architect/${selected || \"none\"}/options`\n  });\n\n  return (\n    <div>\n      {data.map((arch: any) => (\n        <Card\n          key={arch}\n          interactive={arch !== selected}\n          style={{\n            marginBottom: 10,\n            backgroundColor: arch === selected ? undefined : undefined\n          }}\n          onClick={() => setSelected(arch)}\n        >\n          <Icon\n            icon={arch === selected ? \"tick-circle\" : \"circle\"}\n            color={arch === selected ? Colors.GREEN4 : Colors.GRAY4}\n            title={\"Selected\"}\n            style={{ marginRight: 10 }}\n          />\n          {arch}\n        </Card>\n      ))}\n      {selected && (\n        <BlueprintParamsAsync\n          info={paramsInfo}\n          onLoading={() => <span>Loading...</span>}\n          onError={() => <span>Error</span>}\n          onData={({ data }) => (\n            <div style={{ margin: \"20px 0\" }}>\n              {Object.values(data.options)\n                .flatMap((opt: any) => Object.values(opt.args))\n                .map((field: any) => (\n                  <FormGroup\n                    key={field.dest}\n                    label={field.dest}\n                    labelInfo={field.help}\n                    labelFor={\"arch-\" + field.dest}\n                  >\n                    <InputGroup\n                      id={\"arch-\" + field.dest}\n                      placeholder={field.default}\n                      defaultValue={field.default}\n                    ></InputGroup>\n                  </FormGroup>\n                ))}\n            </div>\n          )}\n        />\n      )}\n    </div>\n  );\n}\n","import { Position, Toaster } from \"@blueprintjs/core\";\n\nlet toaster = Toaster.create({ position: Position.BOTTOM_LEFT });\n\nexport { toaster };\n","import React from \"react\";\nimport BaseWidget from \"./Base\";\nimport useAxios from \"axios-hooks\";\nimport { TaskRun, RunningTasks } from \"../models\";\nimport { task_runs__running } from \"../mocks\";\nimport {\n  Colors,\n  Icon,\n  Drawer,\n  Position,\n  Classes,\n  Card,\n  Button,\n  Intent,\n  Toaster\n} from \"@blueprintjs/core\";\nimport { createAsync, mockRequest } from \"../lib/Async\";\nimport TaskRunSummary from \"./TaskRunSummary\";\nimport BlueprintSelect from \"./components/BlueprintSelect\";\nimport ArchitectSelect from \"./components/ArchitectSelect\";\nimport { toaster } from \"../lib/toaster\";\n\nconst Async = createAsync<RunningTasks>();\nconst LaunchInfoAsync = createAsync<any>();\n\nexport default (function LaunchWidget() {\n  const runningTasksAsync = mockRequest<RunningTasks>(task_runs__running);\n\n  return (\n    <BaseWidget badge=\"Step 2\" heading={<span>Launch it</span>}>\n      <Async\n        info={runningTasksAsync}\n        onLoading={() => (\n          <div className=\"bp3-non-ideal-state bp3-skeleton\">\n            <div\n              className=\"bp3-non-ideal-state-visual\"\n              style={{ fontSize: 20 }}\n            >\n              <span className=\"bp3-icon bp3-icon-clean\"></span>\n            </div>\n            <div>You have no tasks running.</div>\n          </div>\n        )}\n        onData={({ data }) => (\n          <div>\n            {data.task_runs.map((run: TaskRun) => (\n              <TaskRunSummary key={run.task_run_id} run={run} />\n            ))}\n          </div>\n        )}\n        checkIfEmptyFn={data => data.task_runs}\n        onEmptyData={() => (\n          <div className=\"bp3-non-ideal-state\">\n            <div\n              className=\"bp3-non-ideal-state-visual\"\n              style={{ fontSize: 20 }}\n            >\n              <span className=\"bp3-icon bp3-icon-clean\"></span>\n            </div>\n            <div>You have no tasks running.</div>\n          </div>\n        )}\n        onError={({ refetch }) => (\n          <span>\n            <Icon icon=\"warning-sign\" color={Colors.RED3} /> Something went\n            wrong.{\" \"}\n            <a onClick={() => refetch()}>\n              <strong>Try again</strong>\n            </a>\n          </span>\n        )}\n      />\n      <div>\n        <div style={{ textAlign: \"center\", marginTop: 15 }}>\n          <LaunchForm />\n        </div>\n      </div>\n    </BaseWidget>\n  );\n} as React.FC);\n\nfunction LaunchForm() {\n  const [openForm, setOpenForm] = React.useState(false);\n  const launchInfo = useAxios({ url: \"launch/options\" });\n\n  const [params, addToParams] = React.useReducer((state, params) => {\n    return { ...state, ...params };\n  }, {});\n\n  return (\n    <div>\n      <button className=\"bp3-button\" onClick={() => setOpenForm(true)}>\n        [TODO] Launch a task\n      </button>\n      <Drawer\n        icon=\"people\"\n        onClose={() => setOpenForm(false)}\n        title=\"Launch a task\"\n        autoFocus={true}\n        canEscapeKeyClose={false}\n        canOutsideClickClose={false}\n        enforceFocus={true}\n        hasBackdrop={true}\n        isOpen={openForm}\n        position={Position.RIGHT}\n        size={\"50%\"}\n        usePortal={true}\n      >\n        <div\n          className={Classes.DRAWER_BODY}\n          style={{ backgroundColor: Colors.LIGHT_GRAY4 }}\n        >\n          <div className={Classes.DIALOG_BODY}>\n            <h2>Step 1. Choose a Task Blueprint</h2>\n            <p className=\"bp3-text-muted\">\n              A blueprint defines the task that will be run &amp; its associated\n              configuration parameters.\n            </p>\n            <LaunchInfoAsync\n              info={launchInfo}\n              onLoading={() => <span>Loading...</span>}\n              onData={({ data }) => (\n                <div>\n                  <BlueprintSelect\n                    data={data.blueprint_types}\n                    onUpdate={(data: any) => addToParams(data)}\n                  />\n                </div>\n              )}\n              onError={() => <span>Error</span>}\n            />\n\n            <h2>Step 2. Choose an Architect</h2>\n            <p className=\"bp3-text-muted\">\n              An architect manages the deployment target of your task.\n            </p>\n            <LaunchInfoAsync\n              info={launchInfo}\n              onLoading={() => <span>Loading...</span>}\n              onData={({ data }) => (\n                <div>\n                  <ArchitectSelect\n                    data={data.architect_types}\n                    onUpdate={(data: any) => {\n                      addToParams(data);\n                    }}\n                  />\n                </div>\n              )}\n              onError={() => <span>Error</span>}\n            />\n            <Button\n              onClick={() => {\n                const validated = true;\n\n                if (validated) {\n                  setOpenForm(false);\n                  toaster.show({\n                    message: \"Launching task...\",\n                    icon: \"cloud-upload\",\n                    intent: Intent.NONE,\n                    timeout: 2000\n                  });\n                  setTimeout(\n                    () =>\n                      toaster.show({\n                        message: \"Launched!\",\n                        icon: \"cloud-upload\",\n                        intent: Intent.SUCCESS,\n                        timeout: 2000\n                      }),\n                    1000\n                  );\n                } else {\n                }\n              }}\n              large\n              icon=\"cloud-upload\"\n              intent={Intent.SUCCESS}\n              style={{ margin: \"20px auto 0\" }}\n            >\n              Launch\n            </Button>\n          </div>\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport BaseWidget from \"./Base\";\nimport useAxios from \"axios-hooks\";\nimport { createAsync, mockRequest } from \"../lib/Async\";\nimport { Icon, Colors } from \"@blueprintjs/core\";\nimport { ReviewableTasks } from \"../models\";\n\nconst Async = createAsync<ReviewableTasks>();\n\nexport default (function ReviewWidget() {\n  const reviewAsync = useAxios({\n    url: \"task_runs/reviewable\"\n  });\n\n  return (\n    <BaseWidget badge=\"Step 3\" heading={<span>Review it</span>}>\n      <Async\n        info={reviewAsync}\n        onLoading={() => (\n          <div className=\"bp3-skeleton\">\n            <div className=\"bp3-non-ideal-state\">\n              <div\n                className=\"bp3-non-ideal-state-visual\"\n                style={{ fontSize: 20 }}\n              >\n                <span className=\"bp3-icon bp3-icon-inbox-search\"></span>\n              </div>\n              <div>You have no work to review.</div>\n            </div>\n          </div>\n        )}\n        onError={({ refetch }) => (\n          <span>\n            <Icon icon=\"warning-sign\" color={Colors.RED3} /> Something went\n            wrong.{\" \"}\n            <a onClick={() => refetch()}>\n              <strong>Try again</strong>\n            </a>\n          </span>\n        )}\n        onData={({ data }) => <span>{JSON.stringify(data)}</span>}\n        checkIfEmptyFn={data => data.task_runs}\n        onEmptyData={() => (\n          <div>\n            <div className=\"bp3-non-ideal-state\">\n              <div\n                className=\"bp3-non-ideal-state-visual\"\n                style={{ fontSize: 20 }}\n              >\n                <span className=\"bp3-icon bp3-icon-inbox-search\"></span>\n              </div>\n              <div>You have no work to review.</div>\n            </div>\n          </div>\n        )}\n      />\n    </BaseWidget>\n  );\n} as React.FC);\n","import React from \"react\";\nimport \"./App.css\";\nimport PrepareWidget from \"./widgets/Prepare\";\nimport LaunchWidget from \"./widgets/Launch\";\nimport ReviewWidget from \"./widgets/Review\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"above-the-fold\"></div>\n      <header>\n        <h1 className=\"bp3-heading\">mephisto</h1>\n        <em\n          className=\"bp3-italics bp3-text-large bp3-text-disabled\"\n          style={{ position: \"relative\", top: -8 }}\n        >\n          crowdsourcing without the tears\n        </em>\n      </header>\n      <div className=\"container\">\n        <PrepareWidget />\n        <LaunchWidget />\n        <ReviewWidget />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { configure } from \"axios-hooks\";\nimport Axios, { AxiosRequestConfig } from \"axios\";\n\nconst axios = Axios.create({\n  baseURL: \"http://localhost:5000/api/v1/\"\n});\n\ndeclare module \"axios\" {\n  export interface AxiosRequestConfig {\n    delayed?: boolean | number;\n  }\n}\n\n// type CustomAxiosRequestConfig = AxiosRequestConfig & { delayed?: boolean };\n\naxios.interceptors.request.use(config => {\n  if (config.delayed) {\n    return new Promise(resolve =>\n      setTimeout(\n        () => resolve(config),\n        config.delayed === true\n          ? 600\n          : config.delayed === false\n          ? 0\n          : config.delayed\n      )\n    );\n  }\n  return config;\n});\n\nconfigure({ axios });\n\nexport default axios;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\nimport \"./axios\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}