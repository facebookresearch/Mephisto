"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[5108],{4127:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(1987);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),k=o,m=d["".concat(l,".").concat(k)]||d[k]||u[k]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=k;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},793:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=n(9375),o=n(8933),r=(n(1987),n(4127)),i=["components"],s={sidebar_position:1},l="Developing and debugging frontends",p={unversionedId:"guides/how_to_use/task_creation/developing_frontends",id:"guides/how_to_use/task_creation/developing_frontends",title:"Developing and debugging frontends",description:"The mephisto-task package",source:"@site/docs/guides/how_to_use/task_creation/developing_frontends.md",sourceDirName:"guides/how_to_use/task_creation",slug:"/guides/how_to_use/task_creation/developing_frontends",permalink:"/docs/guides/how_to_use/task_creation/developing_frontends",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/how_to_use/task_creation/developing_frontends.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"guides",previous:{title:"Run form-based tasks",permalink:"/docs/guides/tutorials/form_composer"},next:{title:"How task run works",permalink:"/docs/guides/how_to_use/task_creation/task_run"}},c={},d=[{value:"The <code>mephisto-task</code> package",id:"the-mephisto-task-package",level:2},{value:"Reusable UI component libraries",id:"reusable-ui-component-libraries",level:2},{value:"<code>@annotated</code> BETA",id:"annotated-beta",level:4},{value:"<code>bootstrap-chat</code>",id:"bootstrap-chat",level:4},{value:"Adding UI error handling to tasks",id:"adding-ui-error-handling-to-tasks",level:2},{value:"Automatic frontend logging",id:"automatic-frontend-logging",level:3},{value:"Alerting crowd-workers of issues",id:"alerting-crowd-workers-of-issues",level:3},{value:"Advanced Usage",id:"advanced-usage",level:3}],u={toc:d};function k(e){var t=e.components,s=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"developing-and-debugging-frontends"},"Developing and debugging frontends"),(0,r.kt)("h2",{id:"the-mephisto-task-package"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"mephisto-task")," package"),(0,r.kt)("p",null,"We provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"mephisto-task")," package for use in your front-end React tasks."),(0,r.kt)("p",null,"To install, add it to your npm project as such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install mephisto-task\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"mephisto-task")," project surfaces three React hooks depending on your use case:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"useMephistoTask")," - Used for static tasks where one-time initial data is enough to power the task. See the example task in ",(0,r.kt)("inlineCode",{parentName:"li"},"/examples/static_react_task/")," for an example project using this hook."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"useMephistoLiveTask")," - Used for multi-turn, socket-based tasks, such as a dialogue task. See the example task in ",(0,r.kt)("inlineCode",{parentName:"li"},"/examples/parlai_chat_task_demo/")," for an example project using this hook."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"useMephistoRemoteProcedureTask")," - Used for static tasks that require access to some remote function on the back-end, for example invoking a back-end model for model-assisted annotation. See the example task in ",(0,r.kt)("inlineCode",{parentName:"li"},"/examples/remote_procedure/mnist/")," for an example project using this hook.")),(0,r.kt)("p",null,"Complete documentation for each of the hooks can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/Mephisto/tree/main/packages/mephisto-task"},"associated README for the ",(0,r.kt)("inlineCode",{parentName:"a"},"mephisto-task")," package"),"."),(0,r.kt)("h2",{id:"reusable-ui-component-libraries"},"Reusable UI component libraries"),(0,r.kt)("h4",{id:"annotated-beta"},(0,r.kt)("inlineCode",{parentName:"h4"},"@annotated")," ","[BETA]"),(0,r.kt)("p",null,"To make common annotation tasks easier, we provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"@annotated/*")," suite of packages."),(0,r.kt)("p",null,"These suite of packages were formerly published under the ",(0,r.kt)("inlineCode",{parentName:"p"},"annotation-toolkit")," and have now been broken down into their own individual packages. We provide helper UI components such as ",(0,r.kt)("inlineCode",{parentName:"p"},"@annotated/bbox"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@annotated/video-player"),", etc."),(0,r.kt)("p",null," We welcome contributions to these packages. To create your own package, you can clone the template folder at ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/annotated/__template__"),"."),(0,r.kt)("h4",{id:"bootstrap-chat"},(0,r.kt)("inlineCode",{parentName:"h4"},"bootstrap-chat")),(0,r.kt)("p",null,"For chat-based components, we provide custom UI components in the ",(0,r.kt)("inlineCode",{parentName:"p"},"bootstrap-chat")," package. You can find further information for them in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/Mephisto/tree/main/packages/bootstrap-chat"},"associated README for the ",(0,r.kt)("inlineCode",{parentName:"a"},"bootstrap-chat")," package"),"."),(0,r.kt)("h2",{id:"adding-ui-error-handling-to-tasks"},"Adding UI error handling to tasks"),(0,r.kt)("p",null,"Currently, we have beta functionality for error handling. We provide a few ways of getting a signal into how your tasks are faring:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Auto-logging errors for React-based tasks"),(0,r.kt)("li",{parentName:"ol"},"Proactively alerting crowd workers when an error occurs and encouraging them to contact you if this happens"),(0,r.kt)("li",{parentName:"ol"},"Exposing error logging infrastructure for more advanced custom front-end use cases")),(0,r.kt)("h3",{id:"automatic-frontend-logging"},"Automatic frontend logging"),(0,r.kt)("p",null,"For #1 above, auto-logging can be enabled for React apps by importing the ",(0,r.kt)("inlineCode",{parentName:"p"},"<ErrorBoundary />")," component and wiring it up as such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { ErrorBoundary } from "mephisto-task";\n...\nconst { handleFatalError, /* ... */ } = useMephistoTask();\n...\nreturn (\n  <ErrorBoundary handleError={handleFatalError}>\n    <MyApp />\n  </ErrorBoundary>\n);\n')),(0,r.kt)("p",null,"This will automatically send an error packet to the backend Mephisto server when an error occurs."),(0,r.kt)("h3",{id:"alerting-crowd-workers-of-issues"},"Alerting crowd-workers of issues"),(0,r.kt)("p",null,"To opt into #2 above, you need to define a global variable as such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'window._MEPHISTO_CONFIG_ = {\n    /* required: */\n    ADD_ERROR_HANDLING: true,\n    /* optional: */\n    ERROR_REPORT_TO_EMAIL: "example@example.org"\n}\n')),(0,r.kt)("p",null,"This will show a prompt as such if an uncaught error is detected:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(3676).Z,width:"1018",height:"848"})),(0,r.kt)("h3",{id:"advanced-usage"},"Advanced Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"handleFatalError")," can also be used in any custom logic code you wish - for example, in handling errors for AJAX requests which live outside of the scope of React Error Boundaries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'fetch("example.org/api/endpoint")\n    .catch(err => handleFatalError(err.toString()));\n')))}k.isMDXComponent=!0},3676:function(e,t,n){t.Z=n.p+"assets/images/faq_ui_error_message-3a90ad07f8289062f9ba09f3bb682435.png"}}]);