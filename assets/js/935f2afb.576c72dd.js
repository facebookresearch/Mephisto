"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[53],{4612:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"guides":[{"type":"link","label":"10-minute Quickstart","href":"/docs/guides/quickstart","docId":"guides/quickstart"},{"type":"category","label":"Tutorials + Getting Started","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Running your first task","href":"/docs/guides/tutorials/first_task","docId":"guides/tutorials/first_task"},{"type":"link","label":"Working on a custom task","href":"/docs/guides/tutorials/custom_react","docId":"guides/tutorials/custom_react"},{"type":"link","label":"Introducing worker controls","href":"/docs/guides/tutorials/worker_controls","docId":"guides/tutorials/worker_controls"},{"type":"link","label":"Developing a workflow","href":"/docs/guides/tutorials/workflows","docId":"guides/tutorials/workflows"},{"type":"link","label":"Reviewing task results","href":"/docs/guides/tutorials/review_app","docId":"guides/tutorials/review_app"},{"type":"link","label":"Run form-based tasks","href":"/docs/guides/tutorials/form_composer","docId":"guides/tutorials/form_composer"}]},{"type":"category","label":"In-depth use","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Creating a Task","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Developing and debugging frontends","href":"/docs/guides/how_to_use/task_creation/developing_frontends","docId":"guides/how_to_use/task_creation/developing_frontends"},{"type":"link","label":"How task run works","href":"/docs/guides/how_to_use/task_creation/task_run","docId":"guides/how_to_use/task_creation/task_run"},{"type":"link","label":"Hosting task assets","href":"/docs/guides/how_to_use/task_creation/hosting_assets","docId":"guides/how_to_use/task_creation/hosting_assets"}]},{"type":"category","label":"Worker Experience","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Mephisto Worker Addons","href":"/docs/guides/how_to_use/worker_experience/mephisto-worker-addons","docId":"guides/how_to_use/worker_experience/mephisto-worker-addons"},{"type":"link","label":"Adding Tips","href":"/docs/guides/how_to_use/worker_experience/tips","docId":"guides/how_to_use/worker_experience/tips"},{"type":"link","label":"Adding Feedback","href":"/docs/guides/how_to_use/worker_experience/feedback","docId":"guides/how_to_use/worker_experience/feedback"}]},{"type":"category","label":"Worker Quality Control","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Using qualifications to improve worker quality","href":"/docs/guides/how_to_use/worker_quality/common_qualification_flows","docId":"guides/how_to_use/worker_quality/common_qualification_flows"},{"type":"link","label":"Teach potential workers with Onboarding","href":"/docs/guides/how_to_use/worker_quality/using_onboarding","docId":"guides/how_to_use/worker_quality/using_onboarding"},{"type":"link","label":"Check worker quality with Screening Units","href":"/docs/guides/how_to_use/worker_quality/using_screen_units","docId":"guides/how_to_use/worker_quality/using_screen_units"},{"type":"link","label":"Check against standards with Gold Labels","href":"/docs/guides/how_to_use/worker_quality/using_golds","docId":"guides/how_to_use/worker_quality/using_golds"},{"type":"link","label":"Other methods for quality control","href":"/docs/guides/how_to_use/worker_quality/other_methods","docId":"guides/how_to_use/worker_quality/other_methods"}]},{"type":"category","label":"Efficiency and Organization","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Use the same configs across tasks","href":"/docs/guides/how_to_use/efficiency_organization/reusing_configs","docId":"guides/how_to_use/efficiency_organization/reusing_configs"},{"type":"link","label":"View task health and status with Mephisto Metrics","href":"/docs/guides/how_to_use/efficiency_organization/metrics_dashboarding","docId":"guides/how_to_use/efficiency_organization/metrics_dashboarding"},{"type":"link","label":"Running Mephisto with Docker","href":"/docs/guides/how_to_use/efficiency_organization/docker","docId":"guides/how_to_use/efficiency_organization/docker"},{"type":"link","label":"Manual installation Mephisto","href":"/docs/guides/how_to_use/efficiency_organization/manual_installation","docId":"guides/how_to_use/efficiency_organization/manual_installation"},{"type":"link","label":"Common Configurations and FAQs","href":"/docs/guides/how_to_use/efficiency_organization/config_faq","docId":"guides/how_to_use/efficiency_organization/config_faq"}]},{"type":"category","label":"Reviewing task results","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/guides/how_to_use/review_app/overview","docId":"guides/how_to_use/review_app/overview"},{"type":"link","label":"Run TaskReview app","href":"/docs/guides/how_to_use/review_app/running","docId":"guides/how_to_use/review_app/running"},{"type":"link","label":"Enable unit preview in TaskReview app","href":"/docs/guides/how_to_use/review_app/enabling_original_unit_preview","docId":"guides/how_to_use/review_app/enabling_original_unit_preview"},{"type":"link","label":"TaskReview app API","href":"/docs/guides/how_to_use/review_app/server_api","docId":"guides/how_to_use/review_app/server_api"}]},{"type":"category","label":"Form-based tasks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"FormComposer overview","href":"/docs/guides/how_to_use/form_composer/overview","docId":"guides/how_to_use/form_composer/overview"},{"type":"link","label":"Run FormComposer tasks","href":"/docs/guides/how_to_use/form_composer/running","docId":"guides/how_to_use/form_composer/running"},{"type":"category","label":"Configure FormComposer tasks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Config files reference","href":"/docs/guides/how_to_use/form_composer/configuration/config_files","docId":"guides/how_to_use/form_composer/configuration/config_files"},{"type":"link","label":"Multiple form versions","href":"/docs/guides/how_to_use/form_composer/configuration/multiple_form_versions","docId":"guides/how_to_use/form_composer/configuration/multiple_form_versions"},{"type":"link","label":"`form_composer_config` command","href":"/docs/guides/how_to_use/form_composer/configuration/form_composer_config_command","docId":"guides/how_to_use/form_composer/configuration/form_composer_config_command"},{"type":"link","label":"FormComposer configuration","href":"/docs/guides/how_to_use/form_composer/configuration/setup","docId":"guides/how_to_use/form_composer/configuration/setup"},{"type":"link","label":"Form rendering callbacks","href":"/docs/guides/how_to_use/form_composer/configuration/form_callbacks","docId":"guides/how_to_use/form_composer/configuration/form_callbacks"},{"type":"link","label":"Using code insertions","href":"/docs/guides/how_to_use/form_composer/configuration/insertions","docId":"guides/how_to_use/form_composer/configuration/insertions"}]},{"type":"link","label":"Embed FormComposer into custom application","href":"/docs/guides/how_to_use/form_composer/embedding","docId":"guides/how_to_use/form_composer/embedding"}]},{"type":"category","label":"JS packages","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Mephisto Packages","href":"/docs/guides/how_to_use/js_packages/main","docId":"guides/how_to_use/js_packages/main"},{"type":"link","label":"Custom packages","href":"/docs/guides/how_to_use/js_packages/custom","docId":"guides/how_to_use/js_packages/custom"}]},{"type":"category","label":"Providers","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Prolific","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Prolific overview","href":"/docs/guides/how_to_use/providers/prolific/intro","docId":"guides/how_to_use/providers/prolific/intro"},{"type":"link","label":"Steps of running a Study","href":"/docs/guides/how_to_use/providers/prolific/running_study","docId":"guides/how_to_use/providers/prolific/running_study"},{"type":"link","label":"Participant Eligibility Requirements","href":"/docs/guides/how_to_use/providers/prolific/eligibility_requirements","docId":"guides/how_to_use/providers/prolific/eligibility_requirements"},{"type":"link","label":"Prolific API oddities","href":"/docs/guides/how_to_use/providers/prolific/prolific_api_oddities","docId":"guides/how_to_use/providers/prolific/prolific_api_oddities"},{"type":"link","label":"Prolific Python SDK","href":"/docs/guides/how_to_use/providers/prolific/prolific_python_sdk","docId":"guides/how_to_use/providers/prolific/prolific_python_sdk"}]},{"type":"link","label":"MTurk","href":"/docs/guides/how_to_use/providers/mturk","docId":"guides/how_to_use/providers/mturk"}]},{"type":"category","label":"Move data around","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Simple usage","href":"/docs/guides/how_to_use/data_porter/simple_usage","docId":"guides/how_to_use/data_porter/simple_usage"},{"type":"link","label":"Reference","href":"/docs/guides/how_to_use/data_porter/reference","docId":"guides/how_to_use/data_porter/reference"},{"type":"link","label":"Custom conflict resolver","href":"/docs/guides/how_to_use/data_porter/custom_conflict_resolver","docId":"guides/how_to_use/data_porter/custom_conflict_resolver"}]}]},{"type":"category","label":"How to Contribute","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Contributing to Mephisto","href":"/docs/guides/how_to_contribute/getting_started","docId":"guides/how_to_contribute/getting_started"},{"type":"link","label":"Frontend setup","href":"/docs/guides/how_to_contribute/frontend_development","docId":"guides/how_to_contribute/frontend_development"},{"type":"link","label":"Backend setup","href":"/docs/guides/how_to_contribute/backend_development","docId":"guides/how_to_contribute/backend_development"},{"type":"link","label":"Database migrations","href":"/docs/guides/how_to_contribute/db_migrations","docId":"guides/how_to_contribute/db_migrations"},{"type":"link","label":"Updating documentation","href":"/docs/guides/how_to_contribute/documentation","docId":"guides/how_to_contribute/documentation"}]}],"explanations":[{"type":"link","label":"Architects, Routers, and `mephisto-task`: The Architect API.","href":"/docs/explanations/architect_api","docId":"explanations/architect_api"},{"type":"link","label":"Mephisto Architecture","href":"/docs/explanations/architecture_overview","docId":"explanations/architecture_overview"}],"reference":[{"type":"link","label":"Overview","href":"/docs/reference/overview","docId":"reference/overview"},{"type":"link","label":"Architects","href":"/docs/reference/architects","docId":"reference/architects"},{"type":"link","label":"Blueprints","href":"/docs/reference/blueprints","docId":"reference/blueprints"},{"type":"link","label":"Providers","href":"/docs/reference/providers","docId":"reference/providers"},{"type":"link","label":"Requesters","href":"/docs/reference/requesters","docId":"reference/requesters"}]},"docs":{"explanations/architect_api":{"id":"explanations/architect_api","title":"Architects, Routers, and `mephisto-task`: The Architect API.","description":"The Architect API is what allows Mephisto to completely abstract away the process of getting workers to operate in Mephisto tasks. In short, it aims to cover 4 primary functions:","sidebar":"explanations"},"explanations/architecture_overview":{"id":"explanations/architecture_overview","title":"Mephisto Architecture","description":"This document seeks to explain the ideas that guided the creation of Mephisto. It will speak about the broad categories of how Mephisto works and how these parts are supposed to play together. It speaks a lot about the design goals of the Mephisto architecture. It isn\'t a perfect 1:1 representation of how the code is organized at the moment, but rather the ideal we were striving to reach. Understanding these ideals makes it easier to understand Mephisto, both for usage and for joining in on development.","sidebar":"explanations"},"guides/how_to_contribute/backend_development":{"id":"guides/how_to_contribute/backend_development","title":"Backend setup","description":"We use pre-commit to enforce code styles on the code base (using black for Python and prettier for Javascript).","sidebar":"guides"},"guides/how_to_contribute/db_migrations":{"id":"guides/how_to_contribute/db_migrations","title":"Database migrations","description":"Overview","sidebar":"guides"},"guides/how_to_contribute/documentation":{"id":"guides/how_to_contribute/documentation","title":"Updating documentation","description":"For large functionality changes, please remember to update mephisto.ai documentation.","sidebar":"guides"},"guides/how_to_contribute/frontend_development":{"id":"guides/how_to_contribute/frontend_development","title":"Frontend setup","description":"We use pre-commit to enforce code styles on the code base (using black for Python and prettier for Javascript).","sidebar":"guides"},"guides/how_to_contribute/getting_started":{"id":"guides/how_to_contribute/getting_started","title":"Contributing to Mephisto","description":"Mephisto is built for developing on, but developing for Mephisto can sometimes be unclear. We aim to provide some guides on contributions for abstractions, underlying infrastructure, or developer experience, but oftentimes the best resource will be opening an issue on our Github directly.","sidebar":"guides"},"guides/how_to_use/data_porter/custom_conflict_resolver":{"id":"guides/how_to_use/data_porter/custom_conflict_resolver","title":"Custom conflict resolver","description":"When importing dump data into local DB, some rows may refer to the same object","sidebar":"guides"},"guides/how_to_use/data_porter/reference":{"id":"guides/how_to_use/data_porter/reference","title":"Reference","description":"This is a reference describing set of commands under the mephisto db command group.","sidebar":"guides"},"guides/how_to_use/data_porter/simple_usage":{"id":"guides/how_to_use/data_porter/simple_usage","title":"Simple usage","description":"Introduction","sidebar":"guides"},"guides/how_to_use/efficiency_organization/config_faq":{"id":"guides/how_to_use/efficiency_organization/config_faq","title":"Common Configurations and FAQs","description":"This document contains some Mephisto usage patterns that should be fairly common, as well as usage tips and other know-how.","sidebar":"guides"},"guides/how_to_use/efficiency_organization/docker":{"id":"guides/how_to_use/efficiency_organization/docker","title":"Running Mephisto with Docker","description":"You may want to keep Mephisto environment entirely contained, and set it up with just a few commands. To do this, we support Docker and Docker Compose as a launch option.","sidebar":"guides"},"guides/how_to_use/efficiency_organization/manual_installation":{"id":"guides/how_to_use/efficiency_organization/manual_installation","title":"Manual installation Mephisto","description":"(THIS FILE IS WORK IN PROGRESS)","sidebar":"guides"},"guides/how_to_use/efficiency_organization/metrics_dashboarding":{"id":"guides/how_to_use/efficiency_organization/metrics_dashboarding","title":"View task health and status with Mephisto Metrics","description":"Mephisto provides an optional extension to view task health metrics via dashboard using Prometheus and Grafana. This lets you see the progress of your task with the following:","sidebar":"guides"},"guides/how_to_use/efficiency_organization/reusing_configs":{"id":"guides/how_to_use/efficiency_organization/reusing_configs","title":"Use the same configs across tasks","description":"As you begin launching many Mephisto tasks, you may find that there are some specific argument options that you frequently use across multiple tasks. Mephisto provides a way to reuse these types of configurations with profiles.","sidebar":"guides"},"guides/how_to_use/form_composer/configuration/config_files":{"id":"guides/how_to_use/form_composer/configuration/config_files","title":"Config files reference","description":"This section is a reference on FormComposer\'s standard configuration files and object attributes.","sidebar":"guides"},"guides/how_to_use/form_composer/configuration/form_callbacks":{"id":"guides/how_to_use/form_composer/configuration/form_callbacks","title":"Form rendering callbacks","description":"During rendering of a Task in the browser, we may send calls to the server-side for additional data. In Mephisto, API views servicing such requests are called \\"remote procedures\\".","sidebar":"guides"},"guides/how_to_use/form_composer/configuration/form_composer_config_command":{"id":"guides/how_to_use/form_composer/configuration/form_composer_config_command","title":"`form_composer_config` command","description":"The formcomposerconfig utility command helps auto-generate FormComposer config. It supports several options:","sidebar":"guides"},"guides/how_to_use/form_composer/configuration/insertions":{"id":"guides/how_to_use/form_composer/configuration/insertions","title":"Using code insertions","description":"FormComposer allows using custom code insertions in these scenarios:","sidebar":"guides"},"guides/how_to_use/form_composer/configuration/multiple_form_versions":{"id":"guides/how_to_use/form_composer/configuration/multiple_form_versions","title":"Multiple form versions","description":"The simplest Task scenario is showing the same exact form to all of your workers. In that case you need to:","sidebar":"guides"},"guides/how_to_use/form_composer/configuration/setup":{"id":"guides/how_to_use/form_composer/configuration/setup","title":"FormComposer configuration","description":"FormComposer tasks are fully defined by their configuration files. These files comprise:","sidebar":"guides"},"guides/how_to_use/form_composer/embedding":{"id":"guides/how_to_use/form_composer/embedding","title":"Embed FormComposer into custom application","description":"A few tips if you wish to embed FormComposer in your custom application:","sidebar":"guides"},"guides/how_to_use/form_composer/overview":{"id":"guides/how_to_use/form_composer/overview","title":"FormComposer overview","description":"You can easily generate form-based Tasks using our FormComposer task generator feature. It produces clean cross-platform Bootstrap forms with client-side form validation.","sidebar":"guides"},"guides/how_to_use/form_composer/running":{"id":"guides/how_to_use/form_composer/running","title":"Run FormComposer tasks","description":"To create and launch a FormComposer task, first create your JSON form configuration,","sidebar":"guides"},"guides/how_to_use/js_packages/custom":{"id":"guides/how_to_use/js_packages/custom","title":"Custom packages","description":"If you want to customize existing packages or create a new one, you can place them into packages directory (and update installed dependencies list in your package.json accordingly).","sidebar":"guides"},"guides/how_to_use/js_packages/main":{"id":"guides/how_to_use/js_packages/main","title":"Mephisto Packages","description":"Mephisto repository contains JavaScript libraries that are located in packages directory.","sidebar":"guides"},"guides/how_to_use/providers/mturk":{"id":"guides/how_to_use/providers/mturk","title":"MTurk","description":"Set up MTurk","sidebar":"guides"},"guides/how_to_use/providers/prolific/eligibility_requirements":{"id":"guides/how_to_use/providers/prolific/eligibility_requirements","title":"Participant Eligibility Requirements","description":"Prolific offers Eligibility Requirements to limit access to your Task (or Study, as Prolific calls it)","sidebar":"guides"},"guides/how_to_use/providers/prolific/intro":{"id":"guides/how_to_use/providers/prolific/intro","title":"Prolific overview","description":"Mephisto supports integration with Prolific human cloud provider.","sidebar":"guides"},"guides/how_to_use/providers/prolific/prolific_api_oddities":{"id":"guides/how_to_use/providers/prolific/prolific_api_oddities","title":"Prolific API oddities","description":"Last updated 2023.07.08","sidebar":"guides"},"guides/how_to_use/providers/prolific/prolific_python_sdk":{"id":"guides/how_to_use/providers/prolific/prolific_python_sdk","title":"Prolific Python SDK","description":"Prolific does not provide a Python implementation of the client.","sidebar":"guides"},"guides/how_to_use/providers/prolific/running_study":{"id":"guides/how_to_use/providers/prolific/running_study","title":"Steps of running a Study","description":"1. Create inactive Study during TaskRun launch, set its totalavailableplaces = None.","sidebar":"guides"},"guides/how_to_use/review_app/enabling_original_unit_preview":{"id":"guides/how_to_use/review_app/enabling_original_unit_preview","title":"Enable unit preview in TaskReview app","description":"By default, TaskReview app UI always shows a generic results view (i.e. unit content submitted by worker in the format saved by AgentState, such as data/data/runs/...../agent_data.json content).","sidebar":"guides"},"guides/how_to_use/review_app/overview":{"id":"guides/how_to_use/review_app/overview","title":"Overview","description":"Generally, to view/export the data, you could write a Python script using the Mephisto DataBrowser class to access the submitted data.","sidebar":"guides"},"guides/how_to_use/review_app/running":{"id":"guides/how_to_use/review_app/running","title":"Run TaskReview app","description":"Run with Docker","sidebar":"guides"},"guides/how_to_use/review_app/server_api":{"id":"guides/how_to_use/review_app/server_api","title":"TaskReview app API","description":"If you wish to customize or improve the TaskReview app, it\'s helpful to know how its UI and server parts interact.","sidebar":"guides"},"guides/how_to_use/task_creation/developing_frontends":{"id":"guides/how_to_use/task_creation/developing_frontends","title":"Developing and debugging frontends","description":"The mephisto-task package","sidebar":"guides"},"guides/how_to_use/task_creation/hosting_assets":{"id":"guides/how_to_use/task_creation/hosting_assets","title":"Hosting task assets","description":"Generally there are two models for hosting assets related to a task, with distinct tradeoffs. These are to upload files to the routing server, or to store the files locally on Mephisto and share the data on connection. The former is generally the easier solution.","sidebar":"guides"},"guides/how_to_use/task_creation/task_run":{"id":"guides/how_to_use/task_creation/task_run","title":"How task run works","description":"Let\'s understand basic components of the task launch, such as configs and the run_task.py script. This will help with customization of tash launch behaviors.","sidebar":"guides"},"guides/how_to_use/worker_experience/feedback":{"id":"guides/how_to_use/worker_experience/feedback","title":"Adding Feedback","description":"To allow for greater communication between workers and researchers it is recommended to use the Feedback component.","sidebar":"guides"},"guides/how_to_use/worker_experience/mephisto-worker-addons":{"id":"guides/how_to_use/worker_experience/mephisto-worker-addons","title":"Mephisto Worker Addons","description":"Overview","sidebar":"guides"},"guides/how_to_use/worker_experience/tips":{"id":"guides/how_to_use/worker_experience/tips","title":"Adding Tips","description":"To allow for greater communication between workers and workers and it is recommended to use the Tips component.","sidebar":"guides"},"guides/how_to_use/worker_quality/common_qualification_flows":{"id":"guides/how_to_use/worker_quality/common_qualification_flows","title":"Using qualifications to improve worker quality","description":"Qualification control is a powerful component of Mephisto, allowing you to filter out workers with both manual and automatic controls. Within this are typical allowlists and blocklists, setting up value-based qualifications, making automatic qualifications for onboarding, and also utilizing the qualifications that various crowdsourcing providers have to offer. This document seeks to describe some common use cases for qualifications, and how we currently go about using them.","sidebar":"guides"},"guides/how_to_use/worker_quality/other_methods":{"id":"guides/how_to_use/worker_quality/other_methods","title":"Other methods for quality control","description":"While not yet implemented in Mephisto\'s core codebase, there are a few additional methods of quality control that may be successful. This doc lists a few that we\'ve considered for Mephisto thusfar.","sidebar":"guides"},"guides/how_to_use/worker_quality/using_golds":{"id":"guides/how_to_use/worker_quality/using_golds","title":"Check against standards with Gold Labels","description":"Gold labeling is commonly used for ensuring worker quality over the full duration of a task. It\'s valuable as an automated measure to track the consistency your workers. For this Mephisto provides the UseGoldUnit blueprint mixin.","sidebar":"guides"},"guides/how_to_use/worker_quality/using_onboarding":{"id":"guides/how_to_use/worker_quality/using_onboarding","title":"Teach potential workers with Onboarding","description":"The first step to getting quality data is describing your task properly and ensuring that workers have understood your instructions. To this end, Mephisto provides the OnboardingRequired Blueprint mixin.","sidebar":"guides"},"guides/how_to_use/worker_quality/using_screen_units":{"id":"guides/how_to_use/worker_quality/using_screen_units","title":"Check worker quality with Screening Units","description":"Screening units help filter out low-quality work, generally by hiding parts of the validation you\'re paying attention to behind the Mephisto server. To support this we provide the ScreenTaskRequired blueprint mixin.","sidebar":"guides"},"guides/quickstart":{"id":"guides/quickstart","title":"10-minute Quickstart","description":"1. Install Docker and Docker Compose following their official documentation","sidebar":"guides"},"guides/tutorials/custom_react":{"id":"guides/tutorials/custom_react","title":"Working on a custom task","description":"Now that you\'ve launched a task or two, it\'s time to get into building your own. This tutorial focuses on giving you the tools to collect the specific data you\'re looking for by building a task of your own. This tutorial itself won\'t produce a useful task, but it should be useful for understanding how to go about creating a real one. You don\'t need_ any React experience to get through this guide, though it will be helpful for understanding the usage more deeply.","sidebar":"guides"},"guides/tutorials/first_task":{"id":"guides/tutorials/first_task","title":"Running your first task","description":"So you want to launch your first task.","sidebar":"guides"},"guides/tutorials/form_composer":{"id":"guides/tutorials/form_composer","title":"Run form-based tasks","description":"If your task has questionnaire format, you can build it out-of-the box with no custom code, by using our FormComposer task generator. All you need to do is to specify your JSON-based form configuration, and run a few commands.","sidebar":"guides"},"guides/tutorials/review_app":{"id":"guides/tutorials/review_app","title":"Reviewing task results","description":"Once you\'ve installed Mephisto, you have access to the mephisto command line utility,","sidebar":"guides"},"guides/tutorials/worker_controls":{"id":"guides/tutorials/worker_controls","title":"Introducing worker controls","description":"Now that you have a task to show workers, in order to get quality data you\'ll want to include a mix of automated and manual reviewing. This guide introduces onboarding, which is a good opportunity to provide workers with a simple test to ensure they read and understand task instructions. A more in-depth guide into their use can be found here. We expect familiarity with React\'s core concepts to understand the frontend part of this tutorial.","sidebar":"guides"},"guides/tutorials/workflows":{"id":"guides/tutorials/workflows","title":"Developing a workflow","description":"While it\'s nice to imagine that you\'ll be able to collect quality data on the first pass, crowdsourcing can be a bit more trial-and-error. This guide focuses on setting up a good workflow, and extending your run-script to support additional functionality.","sidebar":"guides"},"reference/architects":{"id":"reference/architects","title":"Architects","description":"Architects contain the logic surrounding deploying a server that workers will be able to access.","sidebar":"reference"},"reference/blueprints":{"id":"reference/blueprints","title":"Blueprints","description":"The blueprints contain all of the related code required to set up a task run.","sidebar":"reference"},"reference/overview":{"id":"reference/overview","title":"Overview","description":"Our Python API documentation can be found here.","sidebar":"reference"},"reference/providers":{"id":"reference/providers","title":"Providers","description":"Crowd providers standardize access to external crowd workers, by wrapping external API communication through a standardized interface.","sidebar":"reference"},"reference/requesters":{"id":"reference/requesters","title":"Requesters","description":"Requesters are Mephisto\'s wrapper around an identity for a CrowdProvider, usually storing the credentials for an account to launch tasks from.","sidebar":"reference"}}}')}}]);