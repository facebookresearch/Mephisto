"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[6731],{4127:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return m}});var a=n(1987);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=a.createContext({}),u=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},c=function(t){var e=u(t.components);return a.createElement(l.Provider,{value:e},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,l=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),p=u(n),f=o,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return n?a.createElement(m,r(r({ref:e},c),{},{components:n})):a.createElement(m,r({ref:e},c))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,r=new Array(i);r[0]=f;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[p]="string"==typeof t?t:o,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4247:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var a=n(9375),o=n(8933),i=(n(1987),n(4127)),r=["components"],s={sidebar_position:4},l="Developing a workflow",u={unversionedId:"guides/tutorials/workflows",id:"guides/tutorials/workflows",title:"Developing a workflow",description:"While it's nice to imagine that you'll be able to collect quality data on the first pass, crowdsourcing can be a bit more trial-and-error. This guide focuses on setting up a good workflow, and extending your run-script to support additional functionality.",source:"@site/docs/guides/tutorials/workflows.md",sourceDirName:"guides/tutorials",slug:"/guides/tutorials/workflows",permalink:"/docs/guides/tutorials/workflows",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/tutorials/workflows.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guides",previous:{title:"Introducing worker controls",permalink:"/docs/guides/tutorials/worker_controls"},next:{title:"Reviewing task results",permalink:"/docs/guides/tutorials/review_app"}},c={},p=[{value:"Proper use of <code>task_name</code>",id:"proper-use-of-task_name",level:2},{value:"Multi-purpose run scripts",id:"multi-purpose-run-scripts",level:2}],d={toc:p};function f(t){var e=t.components,n=(0,o.Z)(t,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"developing-a-workflow"},"Developing a workflow"),(0,i.kt)("p",null,"While it's nice to imagine that you'll be able to collect quality data on the first pass, crowdsourcing can be a bit more trial-and-error. This guide focuses on setting up a good workflow, and extending your run-script to support additional functionality. "),(0,i.kt)("p",null,"This tutorial is pretty loose at the moment, as many of these practices are ",(0,i.kt)("em",{parentName:"p"},"about")," clever Mephisto usage rather than specific features that are codified yet. We aim to be flexible, and while these workflows have worked for us we expect many to adapt from and expand on them."),(0,i.kt)("h2",{id:"proper-use-of-task_name"},"Proper use of ",(0,i.kt)("inlineCode",{parentName:"h2"},"task_name")),(0,i.kt)("p",null,"It's generally advisable to use different ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name"),"s for every iteration you do on a task, generally moving from ",(0,i.kt)("inlineCode",{parentName:"p"},"testing")," through ",(0,i.kt)("inlineCode",{parentName:"p"},"pilots")," to deploys. Mephisto does not prescribe a specific method for what you must do, but you may find this framework a good starting point."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# for local use while testing and debugging\nmy-cool-task-local-testing\n# For rounds of pilots\nmy-cool-task-pilot-1\nmy-cool-task-pilot-2\n...\n# For actual launches\nmy-cool-task-live-batch-1\nmy-cool-task-live-batch-2\n...\n")),(0,i.kt)("p",null,"Generally it's best to put the ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name")," ",(0,i.kt)("em",{parentName:"p"},"into")," your Hydra ",(0,i.kt)("inlineCode",{parentName:"p"},".yaml")," config and create different configs for different purposes. For instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# local_testing.yaml\n#@package _global_\ndefaults:\n  - /mephisto/blueprint: static_react_task\n  - /mephisto/architect: local\n  - /mephisto/provider: mock\nmephisto:\n  blueprint:\n    ...\n    onboarding_qualification: my-task-onboarding-qualification-sandbox\n  task:\n    task_name: my-task-local-testing\n    ...\nnum_tasks: 2\n\n# live_batch_1.yaml\n#@package _global_\ndefaults:\n  - /mephisto/blueprint: static_react_task\n  - /mephisto/architect: heroku\n  - /mephisto/provider: mturk\nmephisto:\n  blueprint:\n    ...\n    onboarding_qualification: my-task-onboarding-qualification\n  task:\n    task_name: react-static-task-example\n    ...\n    max_num_concurrent_units: 100\nnum_tasks: 2000\n")),(0,i.kt)("p",null,"This also means you can go back and find the configuration details for a specific task run that you launched."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," The ",(0,i.kt)("inlineCode",{parentName:"p"},"mephisto.task.maximum_units_per_worker")," argument is tied specifically to tasks sharing the same ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name"),", so if you want to limit the number of times a worker can do a task in this way you'll have to use the same ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name")," for all tasks you want to instill the limit on."),(0,i.kt)("h2",{id:"multi-purpose-run-scripts"},"Multi-purpose run scripts"),(0,i.kt)("p",null,"For complex tasks with many configuration arguments, we make it possible to add arguments to your run script to simplify your workflows and allow for code reuse. For instance, say you had the following script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# examples/static_react_task/run_task.py\nfrom mephisto.operations.operator import Operator\nfrom mephisto.tools.scripts import task_script, build_and_return_custom_bundle\nfrom mephisto.abstractions.blueprints.abstract.static_task.static_blueprint import (\n    SharedStaticTaskState,\n)\n\nfrom omegaconf import DictConfig\n\n\n@task_script(default_config_file="example")\ndef main(operator: Operator, cfg: DictConfig) -> None:\n    def onboarding_always_valid(onboarding_data):\n        return True\n\n    shared_state = SharedStaticTaskState(\n        static_task_data=[\n            {"text": "This text is good text!"},\n            {"text": "This text is bad text!"},\n        ],\n        validate_onboarding=onboarding_always_valid,\n    )\n\n    task_dir = cfg.task_dir\n    build_and_return_custom_bundle(task_dir)\n\n    operator.launch_task_run(cfg.mephisto, shared_state)\n    operator.wait_for_runs_then_shutdown(skip_input=True, log_rate=30)\n\n\nif __name__ == "__main__":\n    main()\n')),(0,i.kt)("p",null,"And you collected some initial pilot data, reviewed, and chose some specific high-quality workers to assign an ",(0,i.kt)("a",{parentName:"p",href:"../../how_to_use/worker_quality/common_qualification_flows#allowlists-and-blocklists"},"allowlist qualification")," to."),(0,i.kt)("p",null,"Now sometimes you want to launch with that allowlist, while othertimes you want to specifically look for new workers to add to your allowlist. Rather than require two separate scripts, you may create something like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from mephisto.data_model.qualification import QUAL_NOT_EXIST, QUAL_EXISTS\nfrom mephisto.utils.qualifications import make_qualification_dict\nfrom mephisto.operations.operator import Operator\nfrom mephisto.tools.scripts import task_script\nfrom mephisto.operations.hydra_config import build_default_task_config\nfrom mephisto.abstractions.blueprints.abstract.static_task.static_blueprint import (\n    SharedStaticTaskState,\n)\n\nfrom omegaconf import DictConfig\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass MyTaskConfig(build_default_task_config("onboarding_example")):  # type: ignore\n    am_qualifiying_new_workers: str = False\n    allowlist_qualification: str = \'my-allowlist-qual\'\n\n\n@task_script(config=MyTaskConfig)\ndef main(operator: Operator, cfg: DictConfig) -> None:\n    correct_config_answer = cfg.correct_answer\n\n    def onboarding_is_valid(onboarding_data):\n        inputs = onboarding_data["inputs"]\n        outputs = onboarding_data["outputs"]\n        return outputs.get("answer") == correct_config_answer\n\n\n    if cfg.am_qualifiying_new_workers:\n        use_qualifications = [\n            make_qualification_dict(\n                cfg.allowlist_qualification,\n                QUAL_NOT_EXIST,\n                None,\n            ),\n        ]\n    else:\n        use_qualifications = [\n            make_qualification_dict(\n                cfg.allowlist_qualification,\n                QUAL_EXISTS,\n                None,\n            ),\n        ]\n\n    shared_state = SharedStaticTaskState(\n        onboarding_data={"correct_answer": correct_config_answer},\n        validate_onboarding=onboarding_is_valid,\n        qualifications=use_qualifications\n    )\n\n    if cfg.am_qualifiying_new_workers:\n        shared_state.mturk_specific_qualifications = [\n            # MTurk-specific quality control qualifications\n        ]\n\n    operator.launch_task_run(cfg.mephisto, shared_state)\n    operator.wait_for_runs_then_shutdown(skip_input=True, log_rate=30)\n\n\nif __name__ == "__main__":\n    main()\n\n')),(0,i.kt)("p",null,"Now you can launch the same tasks in the two different contexts, adding workers to the pool when you want to extend the workers who are qualified, and using the allowlist when you just want to collect."))}f.isMDXComponent=!0}}]);