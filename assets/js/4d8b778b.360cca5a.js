"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[8374],{4127:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(1987);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),h=o,m=p["".concat(l,".").concat(h)]||p[h]||c[h]||i;return n?a.createElement(m,r(r({ref:t},u),{},{components:n})):a.createElement(m,r({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7227:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var a=n(9375),o=n(8933),i=(n(1987),n(4127)),r=["components"],s={sidebar_position:2},l="Working on a custom task",d={unversionedId:"guides/tutorials/custom_react",id:"guides/tutorials/custom_react",title:"Working on a custom task",description:"Now that you've launched a task or two, it's time to get into building your own. This tutorial focuses on giving you the tools to collect the specific data you're looking for by building a task of your own. This tutorial itself won't produce a useful task, but it should be useful for understanding how to go about creating a real one. You don't need_ any React experience to get through this guide, though it will be helpful for understanding the usage more deeply.",source:"@site/docs/guides/tutorials/custom_react.md",sourceDirName:"guides/tutorials",slug:"/guides/tutorials/custom_react",permalink:"/docs/guides/tutorials/custom_react",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/tutorials/custom_react.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guides",previous:{title:"Running your first task",permalink:"/docs/guides/tutorials/first_task"},next:{title:"Introducing worker controls",permalink:"/docs/guides/tutorials/worker_controls"}},u={},p=[{value:"1. Getting started",id:"1-getting-started",level:2},{value:"1.1 Making a new workspace",id:"11-making-a-new-workspace",level:3},{value:"1.2 Launching the task",id:"12-launching-the-task",level:3},{value:"2. Providing new data to the task",id:"2-providing-new-data-to-the-task",level:2},{value:"2.1 The <code>SharedTaskState</code> object and <code>static_task_data</code> attribute",id:"21-the-sharedtaskstate-object-and-static_task_data-attribute",level:3},{value:"2.2 Editing <code>static_task_data</code>",id:"22-editing-static_task_data",level:3},{value:"3. Accessing the new data",id:"3-accessing-the-new-data",level:2},{value:"3.1 Using React Dev Tools",id:"31-using-react-dev-tools",level:3},{value:"3.2 A prop-flow exercise for React newcomers",id:"32-a-prop-flow-exercise-for-react-newcomers",level:3},{value:"3.3 Making a component to render the new data",id:"33-making-a-component-to-render-the-new-data",level:3},{value:"3.4 Adding a component to respond with new data",id:"34-adding-a-component-to-respond-with-new-data",level:3},{value:"4. Setting up a review",id:"4-setting-up-a-review",level:2},{value:"4.1 Examining the raw data",id:"41-examining-the-raw-data",level:3},{value:"4.2 Using a web-based review flow",id:"42-using-a-web-based-review-flow",level:3},{value:"4.3 Customizing the web-based review flow",id:"43-customizing-the-web-based-review-flow",level:3}],c={toc:p};function h(e){var t=e.components,s=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"working-on-a-custom-task"},"Working on a custom task"),(0,i.kt)("p",null,"Now that you've ",(0,i.kt)("a",{parentName:"p",href:"../first_task"},"launched a task or two"),", it's time to get into building your own. This tutorial focuses on giving you the tools to collect the specific data you're looking for by building a task of your own. This tutorial itself won't produce a useful task, but it should be useful for understanding how to go about creating a real one. You don't ",(0,i.kt)("em",{parentName:"p"},"need")," any React experience to get through this guide, though it will be helpful for understanding the usage more deeply."),(0,i.kt)("h2",{id:"1-getting-started"},"1. Getting started"),(0,i.kt)("h3",{id:"11-making-a-new-workspace"},"1.1 Making a new workspace"),(0,i.kt)("p",null,"We'll extend from the static react task example, but we'll want to move it to it's own workspace. From within the main Mephisto directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cp -r examples/static_react_task/ tmp/static_tutorial/\ncd tmp/static_tutorial/\n")),(0,i.kt)("p",null,"Now that we're here, we should also set up your config file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# hydra_configs/conf/example.yaml \n#@package _global_\ndefaults:\n  - /mephisto/blueprint: static_react_task\n  - /mephisto/architect: local\n  - /mephisto/provider: mock\nmephisto:\n  blueprint:\n    task_source: ${task_dir}/webapp/build/bundle.js\n    link_task_source: false\n    extra_source_dir: ${task_dir}/webapp/src/static\n    units_per_assignment: 1\n  task:\n    task_name: custom-react-tutorial   # Remember to set an appropriate task_name!\n    task_title: "Rating a sentence as good or bad"\n    task_description: "In this task, you\'ll be given a sentence. It is your job to rate it as either good or bad."\n    task_reward: 0.05\n    task_tags: "test,simple,button"\n')),(0,i.kt)("p",null,"It is important to give a new ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name")," as we are creating a custom task. For local development ",(0,i.kt)("strong",{parentName:"p"},"only")," it also makes sense to set ",(0,i.kt)("inlineCode",{parentName:"p"},"link_task_source")," to true. This allows changes to propagate to your localhost server when you reload the page (otherwise you would have to shutdown and restart the server to see changes). "),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"task_source")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"extra_source_dir")," arguments are also of importance, as this is where the ",(0,i.kt)("inlineCode",{parentName:"p"},"StaticReactBlueprint")," class will be looking for the compiled React app's Javascript bundle as well as a folder for extra static resources for the page, respectively."),(0,i.kt)("h3",{id:"12-launching-the-task"},"1.2 Launching the task"),(0,i.kt)("p",null,"From the current directory, you should be able to execute the run script and get a job working. We're using a different ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name")," to prevent polluting our later task with data that won't share the same format. It is a good practice to do this with initial iterations, and to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name")," any time you change input or output arguments."),(0,i.kt)("p",null,"You can update the ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"link_task_source")," values in your config and run the task like below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python run_task.py\n")),(0,i.kt)("p",null,"or you can set them when you run the task:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python run_task.py mephisto.task.task_name=custom-react-tutorial-iterating mephisto.blueprint.link_task_source=true\n")),(0,i.kt)("p",null,"This will launch a simple task where an annotator is supposed to note a sentence as being good or bad. Clicking a button auto-submits the task. In the next sections we'll add other content. "),(0,i.kt)("p",null,"To establish a link where your changes will be propagated to the localhost server(when you reload), create a separate terminal window and run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd webapp && npm run dev:watch\n")),(0,i.kt)("p",null,"Moving forward, we'll update this task so that workers are able to edit the text as well as rate the original sentence."),(0,i.kt)("h2",{id:"2-providing-new-data-to-the-task"},"2. Providing new data to the task"),(0,i.kt)("h3",{id:"21-the-sharedtaskstate-object-and-static_task_data-attribute"},"2.1 The ",(0,i.kt)("inlineCode",{parentName:"h3"},"SharedTaskState")," object and ",(0,i.kt)("inlineCode",{parentName:"h3"},"static_task_data")," attribute"),(0,i.kt)("p",null,"We'll begin by modifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"SharedStaticTaskState"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"static_task_data")," attribute. For info on this attribute, recall ",(0,i.kt)("inlineCode",{parentName:"p"},"mephisto wut"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ mephisto wut blueprint=static_react_task static_task_data\n\n\n                Tasks launched from static blueprints need\n                a prebuilt javascript bundle containing the task. We suggest building\n                with our provided useMephistoTask hook.\n            \n\n\nAdditional SharedTaskState args from SharedStaticTaskState, which may be configured in your run script\n                                                                                             \n                              Additional Shared TaskState args                               \n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 dest             \u2502 type           \u2502 default \u2502 help                   \u2502 choices \u2502 required \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 static_task_data \u2502 Iterable[Dict] \u2502 []      \u2502 List or generator that \u2502 None    \u2502 False    \u2502\n\u2502                  \u2502                \u2502         \u2502 returns dicts of task  \u2502         \u2502          \u2502\n\u2502                  \u2502                \u2502         \u2502 data. Generators can   \u2502         \u2502          \u2502\n\u2502                  \u2502                \u2502         \u2502 be used for tasks with \u2502         \u2502          \u2502\n\u2502                  \u2502                \u2502         \u2502 lengths that aren't    \u2502         \u2502          \u2502\n\u2502                  \u2502                \u2502         \u2502 known at the start of  \u2502         \u2502          \u2502\n\u2502                  \u2502                \u2502         \u2502 a run, or are          \u2502         \u2502          \u2502\n\u2502                  \u2502                \u2502         \u2502 otherwise determined   \u2502         \u2502          \u2502\n\u2502                  \u2502                \u2502         \u2502 during the run.        \u2502         \u2502          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n")),(0,i.kt)("p",null,"This field replaces using the ",(0,i.kt)("inlineCode",{parentName:"p"},"csv_file")," used in the previous tutorial, allowing our run script to specify data directly. React tasks can be run off of ",(0,i.kt)("inlineCode",{parentName:"p"},".csv")," files as well, if you'd prefer."),(0,i.kt)("p",null,"At the moment, the data we're providing is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'shared_state = SharedStaticTaskState(\n    static_task_data=[\n        {"text": "This text is good text!"},\n        {"text": "This text is bad text!"},\n    ],\n    ...\n)\n')),(0,i.kt)("p",null,"This corresponds to two ",(0,i.kt)("inlineCode",{parentName:"p"},"Assignment"),"s, each with an entry for ",(0,i.kt)("inlineCode",{parentName:"p"},"text"),". Altering these will change the text that is present, while adding new entries to the array will lead to Mephisto generating more ",(0,i.kt)("inlineCode",{parentName:"p"},"Assignment"),"s. "),(0,i.kt)("h3",{id:"22-editing-static_task_data"},"2.2 Editing ",(0,i.kt)("inlineCode",{parentName:"h3"},"static_task_data")),(0,i.kt)("p",null,"For now let's just edit the data and add a new field. Update the ",(0,i.kt)("inlineCode",{parentName:"p"},"static_task_data")," to look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'static_task_data=[\n    {"text": "This text is good text! Now it is extra good", "edited_by_requester": True},\n    {"text": "This text is bad text!", "edited_by_requester": False},\n],\n')),(0,i.kt)("p",null,"At this point you can run the task again."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python run_task.py mephisto.task.task_name=custom-react-tutorial-iterating\n")),(0,i.kt)("p",null,"Note the first one you work on displays your new edited text. But what about the new ",(0,i.kt)("inlineCode",{parentName:"p"},"edited_by_requester")," field?"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Tip:")," In your own tasks, you can use a function that creates static task data, or even a generator for it, but this is discussed more in the ",(0,i.kt)("a",{parentName:"p",href:"../workflows"},"workflows")," tutorial.")),(0,i.kt)("h2",{id:"3-accessing-the-new-data"},"3. Accessing the new data"),(0,i.kt)("h3",{id:"31-using-react-dev-tools"},"3.1 Using React Dev Tools"),(0,i.kt)("p",null,"Generally, developing with React is easiest if you have the React Dev Tools extension in your browser. It's currently available in ",(0,i.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"},"Chrome")," and ",(0,i.kt)("a",{parentName:"p",href:"https://addons.mozilla.org/en-US/firefox/addon/react-devtools/"},"Firefox"),". With this you can peer into the react state and see what's inside:\n",(0,i.kt)("img",{src:n(706).Z,width:"1630",height:"523"}),"\nHere on the right you can see the ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"edited_by_requester")," fields accessible in ",(0,i.kt)("inlineCode",{parentName:"p"},"taskData"),". Now that we know it's there, we can do something with it."),(0,i.kt)("h3",{id:"32-a-prop-flow-exercise-for-react-newcomers"},"3.2 A prop-flow exercise for React newcomers"),(0,i.kt)("p",null,"The source code for your frontend exists in the ",(0,i.kt)("inlineCode",{parentName:"p"},"webapp/src")," directory. For those who are new to React let's take a stop at ",(0,i.kt)("inlineCode",{parentName:"p"},"MainApp")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"webapp/src/app.jsx")," to follow the path of the props through the application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// webapp/src/app.jsx\nfunction MainApp() {\n  const {\n    blockedReason,\n    blockedExplanation,\n    isPreview,\n    isLoading,\n    initialTaskData, // Task data comes from this hook\n    handleSubmit,\n    handleFatalError,\n    isOnboarding,\n  } = useMephistoTask();\n")),(0,i.kt)("p",null,"Any Mephisto frontend task relies on either the ",(0,i.kt)("inlineCode",{parentName:"p"},"useMephistoTask")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"useMephistoLiveTask")," hooks to get underlying state about the worker and the task. For now it's only important to note that we pull ",(0,i.kt)("inlineCode",{parentName:"p"},"initialTaskData")," from Mephisto, as well as a ",(0,i.kt)("inlineCode",{parentName:"p"},"handleSubmit")," function. (More details on usage of these hooks is available ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/Mephisto/tree/main/packages/mephisto-task"},"here"),".)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"  if (blockedReason !== null) {\n    return ...\n  }\n  if (isLoading) {\n    return <LoadingScreen />;\n  }\n  if (isPreview) {\n    return ...\n  }\n")),(0,i.kt)("p",null,"Mephisto tasks can have a few states, loading, blocked, preview, onboarding, and main task. At the moment we'll leave discussion of these states to later tutorials."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'  return (\n    <div>\n      <ErrorBoundary handleError={handleFatalError}>\n        <BaseFrontend\n          taskData={initialTaskData}  // We\'ll be using these two props\n          onSubmit={handleSubmit}     // in the next sections.\n          isOnboarding={isOnboarding}\n          onError={handleFatalError}\n        />\n      </ErrorBoundary>\n    </div>\n  );\n}\n\nReactDOM.render(<MainApp />, document.getElementById("app"));\n')),(0,i.kt)("p",null,"In this last segment, we find that we can access the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialTaskData")," from Mephisto in the ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseFrontend"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"taskData")," prop, and will be able to call ",(0,i.kt)("inlineCode",{parentName:"p"},"handleSubmit")," through ",(0,i.kt)("inlineCode",{parentName:"p"},"onSubmit"),". "),(0,i.kt)("h3",{id:"33-making-a-component-to-render-the-new-data"},"3.3 Making a component to render the new data"),(0,i.kt)("p",null,"Lets add a component to the frontend that will inform the worker if the ",(0,i.kt)("inlineCode",{parentName:"p"},"edited_by_requester")," flag has been set. For this we'll be editing the ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseFrontend")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"webapp/src/components/core_components.jsx"),". Let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"TellTextIsEditedBlock")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// webapp/src/components/core_components.jsx\nfunction TellTextIsEdited({ taskData }) {\n    if (taskData.edited_by_requester) {\n        return <p><b>\n            Note: this text was pre-screened by the requester\n        </b></p>;\n    } else {\n        return null;\n    }\n}\n")),(0,i.kt)("p",null,"And now we can drop this into the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleFrontend")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// webapp/src/components/core_components.jsx\nfunction SimpleFrontend({ taskData, isOnboarding, onSubmit, onError }) {\n  if (!taskData) {\n    return <LoadingScreen />;\n  }\n  if (isOnboarding) {\n    return <OnboardingComponent onSubmit={onSubmit} />;\n  }\n  return (\n    <div>\n      <Directions>\n        Directions: Please rate the below sentence as good or bad.\n        <TellTextIsEdited taskData={taskData} />\n      </Directions>\n      ...\n")),(0,i.kt)("p",null,"Launching again we find that the first task has our new text, but the second task doesn't. Success!"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(459).Z,width:"3016",height:"720"})),(0,i.kt)("h3",{id:"34-adding-a-component-to-respond-with-new-data"},"3.4 Adding a component to respond with new data"),(0,i.kt)("p",null,"Now that we've used the full flow of providing custom task data to the worker and having components use these, the next step is to allow submission of whatever data you would like. At the moment, all that is sent to the backend is the ",(0,i.kt)("inlineCode",{parentName:"p"},"rating"),", as can be seen in the two ",(0,i.kt)("inlineCode",{parentName:"p"},"onSubmit")," calls:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'onClick={() => onSubmit({ rating: "good" })}\n...\nonClick={() => onSubmit({ rating: "bad" })}\n')),(0,i.kt)("p",null,"Based on how ",(0,i.kt)("inlineCode",{parentName:"p"},"onSubmit")," is wired to Mephisto's ",(0,i.kt)("inlineCode",{parentName:"p"},"handleSubmit")," function, anything (json-serializable) in the object passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"onSubmit")," will be what is saved for the task. For this tutorial we'll want to put something else useful into this object. To this end, let's add an input box that allows workers to submit an edit to correct the sentence in some way. "),(0,i.kt)("p",null,"We can add some state to ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleFrontend")," with the ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-state.html"},(0,i.kt)("inlineCode",{parentName:"a"},"useState")," React Hook"),". This provides us with an ",(0,i.kt)("inlineCode",{parentName:"p"},"editedText")," value initialized to ",(0,i.kt)("inlineCode",{parentName:"p"},"taskData.text"),", which we'll set to track the worker edits, and a setter to alter that value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// webapp/src/components/core_components.jsx\nfunction SimpleFrontend({ taskData, isOnboarding, onSubmit, onError }) {\n  const [editedText, setEditedText] = React.useState(taskData.text); // <=\n  return (\n      ...\n")),(0,i.kt)("p",null,"We now need to create a text input field that is wired to this state:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'...\n<p className="title is-3 is-spaced">{taskData.text}</p>\n<div>\n    <b>Corrections:</b>\n    <input \n        type="text" \n        value={editedText} \n        onChange={(e) => setEditedText(e.target.value)} \n        size="50" \n    />\n</div>\n<div className="field is-grouped">\n...\n')),(0,i.kt)("p",null,"And lastly, make sure to add the new text to the submission packet in both ",(0,i.kt)("inlineCode",{parentName:"p"},"onSubmit")," calls:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'onClick={() => onSubmit({ rating: "good", editedText: editedText })}\n...\nonClick={() => onSubmit({ rating: "bad", editedText: editedText })}\n')),(0,i.kt)("p",null,"Let's launch one last time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python run_task.py mephisto.task.task_name=custom-react-tutorial-iterating\n")),(0,i.kt)("p",null,"And just like that we're able to see an input field:\n",(0,i.kt)("img",{src:n(2527).Z,width:"940",height:"470"}),"\nWhen we hit submit, we can see our custom data is passed along as well:\n",(0,i.kt)("img",{src:n(2192).Z,width:"1049",height:"508"}),"\nCongrats! You've been able to collect some custom data through Mephisto. Of course, this is just scratching the surface on the types of tasks you can create."),(0,i.kt)("h2",{id:"4-setting-up-a-review"},"4. Setting up a review"),(0,i.kt)("h3",{id:"41-examining-the-raw-data"},"4.1 Examining the raw data"),(0,i.kt)("p",null,"Now that we've finished creating the task, we'll want to be able to review the data inside. Let's start by creating an ",(0,i.kt)("inlineCode",{parentName:"p"},"examine_results.py")," script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# examine_results.py\nfrom mephisto.abstractions.databases.local_database import LocalMephistoDB\nfrom mephisto.tools.examine_utils import run_examine_or_review, print_results\nfrom mephisto.data_model.worker import Worker\nfrom mephisto.data_model.unit import Unit\n\ndb = None\n\ndef format_data_for_printing(data):\n    global db\n    # Custom tasks can define methods for how to display their data in a relevant way\n    worker_name = Worker.get(db, data["worker_id"]).worker_name\n    contents = data["data"]\n    duration = contents["times"]["task_end"] - contents["times"]["task_start"]\n    metadata_string = (\n        f"Worker: {worker_name}\\nUnit: {data[\'unit_id\']}\\n"\n        f"Duration: {int(duration)}\\nStatus: {data[\'status\']}\\n"\n    )\n\n    inputs = contents["inputs"]\n    inputs_string = f"Provided input: {inputs}\\n"\n    outputs = contents["outputs"][\'final_data\']\n    output_string = f"Provided output: {outputs}\\n"\n    return f"-------------------\\n{metadata_string}{inputs_string}{output_string}"\n\n\ndef main():\n    global db\n    db = LocalMephistoDB()\n    run_examine_or_review(db, format_data_for_printing)\n\n\nif __name__ == "__main__":\n    main()\n')),(0,i.kt)("p",null,"This review script is very much like the one we used in the first tutorial, however we've left things particularly generic for now. You'll recall that all of the tasks we'd launched so far used the same ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"custom-react-tutorial-iterating"),". Let's see what happens when we check it out:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},">> python examine_results.py \nDo you want to (r)eview, or (e)xamine data? Default examine. Can put e <end> or e <start> <end> to choose how many to view\ne\nInput task name: custom-react-tutorial-iterating\n-------------------\nWorker: x\nUnit: 5984\nDuration: 10\nStatus: completed\nProvided input: {'text': 'This text is good text! Now it is extra good!', 'edited_by_requester': True}\nProvided output: {'rating': 'good', 'editedText': \"I've edited the text via the corrections box!\"}\n\n-------------------\nWorker: x\nUnit: 5982\nDuration: 10\nStatus: completed\nProvided input: {'text': 'This text is good text! Now it is extra good!', 'edited_by_requester': True}\nProvided output: {'rating': 'good'}\n\n-------------------\nWorker: x\nUnit: 5975\nDuration: 11\nStatus: completed\nProvided input: {'text': 'This text is bad text!', 'edited_by_requester': False}\nProvided output: {'rating': 'bad'}\n\n")),(0,i.kt)("p",null,"You may have a different number of submissions depending on how many you did in the tutorial, but importantly you'll find that not all of them have a provided output entry for ",(0,i.kt)("inlineCode",{parentName:"p"},"editedText"),". This is because we changed the format mid-way while continuing to use the same ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name"),". "),(0,i.kt)("p",null,"Generally, you should change the ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name")," between runs such that your data format is consistent throughout, but you can also ensure that your ",(0,i.kt)("inlineCode",{parentName:"p"},"format_for_printing_data")," function is tolerant of the changes."),(0,i.kt)("p",null,"In any case, for future runs you could have formatting that explicitly extracts the portions you're interested in, or does additional logic to make your review easier. For instance, you could make it so that the corrected text is only shown if the worker made an edit:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"...\noutputs = contents[\"outputs\"]['final_data']\ndid_edit_text = outputs['editedText'] == inputs['text']\nedit_text_string = f\"Corrected Text: {outputs['editedText']}\\n\" if did_edit_text else \"\"\noutput_string = f\"Provided rating: {outputs['rating']}\\n{edit_text_string}\"\n...\n")),(0,i.kt)("p",null,"While creating review scripts is powerful, it's not always the easiest way to review data. Annotations that are best in full context, like videos for instance, would likely benefit from being able to view the data directly."),(0,i.kt)("h3",{id:"42-using-a-web-based-review-flow"},"4.2 Using a web-based review flow"),(0,i.kt)("p",null,"For tasks that are best reviewed through a full UI, Mephisto offers a way to create web-based review flows. "),(0,i.kt)("p",null,"To view the results of the task we just ran through the web-based workflow, run the ",(0,i.kt)("inlineCode",{parentName:"p"},"mephisto review")," CLI tool:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mephisto review --db custom-react-tutorial-iterating --stdout --all\n")),(0,i.kt)("p",null,"This will launch a local server where you will be able to browse, filter, and drill into the data collected for your task."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(7501).Z,width:"2626",height:"1902"})),(0,i.kt)("p",null,"You can also drill into a specific task to explore the details further."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(511).Z,width:"2626",height:"1902"})),(0,i.kt)("h3",{id:"43-customizing-the-web-based-review-flow"},"4.3 Customizing the web-based review flow"),(0,i.kt)("p",null,'By default, we ship with a batteries-included review experience, however you can easily create your own interface with custom "renderers" for visualizing your collected data.'),(0,i.kt)("p",null,"Let's walk through creating our own custom renderer for our data."),(0,i.kt)("p",null,"First, we'll create our review application by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"create-react-app")," npm package, with a mephisto review template. Continuing from within our project folder at ",(0,i.kt)("inlineCode",{parentName:"p"},"tmp/static_tutorial/")," let's run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app@latest custom-review --template mephisto-review \n")),(0,i.kt)("p",null,"Once the template is done installing we'll create a new file at ",(0,i.kt)("inlineCode",{parentName:"p"},"custom-review/src/custom/MyDataItem.js")," and fill it in as such:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import React from "react";\nimport { Card } from "@blueprintjs/core";\n\nexport default function MyDataItem({item}) {\n    const rating = item.data.data.outputs.final_data.rating;\n    const duration = Math.round(item.data.data.times.task_end - item.data.data.times.task_start);\n    return <Card>\n        <h1>{ rating === "good" ? "\ud83d\udc4d" : "\ud83d\udc4e"}</h1>\n        <p>{duration} seconds</p>\n    </Card>\n}\n\n')),(0,i.kt)("p",null,"Note that we're leveraging the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Card />")," component from the rich suite of components ",(0,i.kt)("a",{parentName:"p",href:"https://blueprintjs.com/docs/#core/components/card"},"provided by BlueprintJS")," to create our renderer. By default, the review template imports the ",(0,i.kt)("inlineCode",{parentName:"p"},"@blueprintjs/core")," library so you can immediately start using any of the UI components provided there."),(0,i.kt)("p",null,"Now that we've created our own ItemRenderer, we'll use it by updating ",(0,i.kt)("inlineCode",{parentName:"p"},"custom-review/src/index.js")," to first import the renderer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import MyDataItem from "./custom/MyDataItem"\n')),(0,i.kt)("p",null,"Then we'll pass it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"<CollectionView />")," component to modify the way in which our data renders in the grid view:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<CollectionView\n  collectionRenderer={GridCollection}\n  itemRenderer={MyDataItem}\n  pagination={true}\n  resultsPerPage={9}\n/>\n")),(0,i.kt)("p",null,"To see our new renderer in action, let's build our app and invoke the mephisto review CLI with it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd custom-review/\nnpm run build\nmephisto review build/ --db custom-react-tutorial-iterating --stdout --all\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note:")," Notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"mephisto review")," command here is similar to the one run in the previous section, except this time we pass in the relative path to the build folder as an argument."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6030).Z,width:"2626",height:"1902"})),(0,i.kt)("h1",{id:"building-from-task-blocks-with-annotated-beta"},"Building from task blocks with ",(0,i.kt)("inlineCode",{parentName:"h1"},"@annotated")," ","[BETA]"),(0,i.kt)("p",null,"Mephisto at the core is built for complete flexibility over the kinds of tasks you can create. Building everything from scratch though can be a lot, so we've created the annotation toolkit and ",(0,i.kt)("inlineCode",{parentName:"p"},"@annotated")," suite of libraries. These have components that may be useful for your annotation tasks, as well as examples of developed flows you can use or extend for your tasks."),(0,i.kt)("p",null,"The full suite of tools is currently in beta and can be found in the ",(0,i.kt)("a",{parentName:"p",href:"https://annotation-toolkit-storybook.vercel.app/"},"Storybook here"),"."))}h.isMDXComponent=!0},7501:function(e,t,n){t.Z=n.p+"assets/images/custom_react_review_all-6ac8053338f27836f35fe86f1c18e17c.png"},6030:function(e,t,n){t.Z=n.p+"assets/images/custom_react_review_renderer-2516b0fbd23108a9cd153b931bbeb358.png"},511:function(e,t,n){t.Z=n.p+"assets/images/custom_react_review_single-0164de5a41b062c6eb0d6788535c7629.png"},706:function(e,t,n){t.Z=n.p+"assets/images/react_dev_tools_see_props-7e8a0003bae24974b5d13e550b3ffd11.png"},2192:function(e,t,n){t.Z=n.p+"assets/images/static_task_correction_submit-613e73014a531407d176fb912c592508.png"},2527:function(e,t,n){t.Z=n.p+"assets/images/static_task_with_corrections_box-30844c659f834608cc5a4ad3d1885677.png"},459:function(e,t,n){t.Z=n.p+"assets/images/with_requester_screening_text-32b0ca1a0bd04c2e1e555be70f6bf07c.png"}}]);