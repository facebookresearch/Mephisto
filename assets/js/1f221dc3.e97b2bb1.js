"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[1295],{4127:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var a=n(1987);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=i,k=u["".concat(p,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},38:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var a=n(9375),i=n(8933),r=(n(1987),n(4127)),o=["components"],l={sidebar_position:1},p="Architecture diagram",s={unversionedId:"explanations/architecture_overview",id:"explanations/architecture_overview",title:"Architecture diagram",description:"At a high level, Mephisto runs its data collection/annotation tasks as shown in this sequence diagram.",source:"@site/docs/explanations/architecture_overview.md",sourceDirName:"explanations",slug:"/explanations/architecture_overview",permalink:"/docs/explanations/architecture_overview",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/explanations/architecture_overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"explanations",next:{title:"Mephisto Abstractions",permalink:"/docs/explanations/abstractions_overview"}},c={},u=[],m={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"architecture-diagram"},"Architecture diagram"),(0,r.kt)("p",null,"At a high level, Mephisto runs its data collection/annotation tasks as shown in this sequence diagram."),(0,r.kt)("p",null,"!",(0,r.kt)("inlineCode",{parentName:"p"},"task_run_sequence_diagram.png"),"(./images/task_run_sequence_diagram.png)"),(0,r.kt)("h1",{id:"codebase-structure"},"Codebase structure"),(0,r.kt)("p",null,"This is a quick guide over file directories in Mephisto project. Note that some directories include their own ",(0,r.kt)("inlineCode",{parentName:"p"},"README.md")," file with further details."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," - contain local Mephisto database, provider-specific data stores, and worker input collected during Task runs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"docker")," - dockerization setup for Mephisto project"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"docs")," - content, config, and build for ",(0,r.kt)("inlineCode",{parentName:"li"},"Mephisto.ai")," docs",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"legacy")," - deprecated doc pages"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"web")," - Docusaurus React app (used to serve doc pages)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"blog, docs")," - actual content (pages in Markdown format)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"other folders")," - react app build"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"examples")," - Mephisto use cases",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"form_composer_demo")," - FormComposer (FC) examples",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," - JSON configurations for each type of FC setup"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hydra_configs/conf")," - YAML configurations for related TaskRuns"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"preview")," - simple HTML template (used only for Task Preview on Mturk platform)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"webapp")," - task's React app containing FC",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"src")," - React code to display FC component (example of using FC plugin in a project)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"webpack.config.js")," - webpack config for React app containing FC"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"webpack.config.presigned_urls.js")," - webpack config for React app containing FC with presigned S3 URLs feature"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"webpack.config.review.js")," - webpack config for React app displayin read-only task page inside iframe (for TaskReview app)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"static_react_task_with_tips"),' - deprecated example (current code uses "bonuses" and "feedback" for disambiguation instead of "tips")'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"simple_static_task")," - deprecated example (Mephisto is moving away from HTML templates as its tooling mostly supports React-based tasks)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"other examples")," - older Mephisto examples (working, but not the best code structure)"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hydra_configs")," - settings for Hydra (Mephisto's configuration tool)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hydra/job_logging")," - default YAML config for logging"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"profile"),' - "drop-in" configs (can be used in any Task by referencing a profile name in Task launch command with a "+" sign)'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hydra_plugins")," - additional tooling for Hydra"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mephisto")," - main Mephisto project folder",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"abstractions")," - interface to Mephisto primitives, with subfolders containing their implementations for specific cases (e.g. Parlai Chat, Prolific provider, EC2 architect)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"client")," - collection of CLI tools (e.g. launch TaskReview app, launch FormComposer generator, etc)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cli.py")," - contains all supported CLI commands for use with ",(0,r.kt)("inlineCode",{parentName:"li"},"mephisto \u2026")," command"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data_model")," - classes representing core Mephisto objects"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"generators")," - Mephisto apps generating code for Task apps based on their configuration",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"form_composer")," - builds React app for form-based tasks (based on specific provided FC JSON config files), and launches a server to display task units in a browser"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"operations")," - part of core Mephisto code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"review_app")," - builds React app for TaskReview, and launches a server to display TaskReview in a browser"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"outputs")," - exhaust produced by running the code (logs, database dumps, etc)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"packages")," - npm packages (can be used locally, and some are also in npm repo)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"react-form-composer")," - package for FC React component"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scripts")," - command-line utilities for code upkeep"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test")," - All tests (Back-end and Front-end, Unittests and Integration tests)")))}d.isMDXComponent=!0}}]);