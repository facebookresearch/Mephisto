"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[743],{4127:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(1987);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),k=o,m=c["".concat(s,".").concat(k)]||c[k]||d[k]||i;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,r[1]=l;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5738:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var a=n(9375),o=n(8933),i=(n(1987),n(4127)),r=["components"],l={sidebar_position:2},s="Multiple annotator versions",u={unversionedId:"guides/how_to_use/video_annotator/configuration/multiple_annotator_versions",id:"guides/how_to_use/video_annotator/configuration/multiple_annotator_versions",title:"Multiple annotator versions",description:"The simplest Task scenario is showing the same exact annotator to all of your workers. In that case you need to:",source:"@site/docs/guides/how_to_use/video_annotator/configuration/multiple_annotator_versions.md",sourceDirName:"guides/how_to_use/video_annotator/configuration",slug:"/guides/how_to_use/video_annotator/configuration/multiple_annotator_versions",permalink:"/docs/guides/how_to_use/video_annotator/configuration/multiple_annotator_versions",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/how_to_use/video_annotator/configuration/multiple_annotator_versions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guides",previous:{title:"Config files reference",permalink:"/docs/guides/how_to_use/video_annotator/configuration/config_files"},next:{title:"`video_annotator config` command",permalink:"/docs/guides/how_to_use/video_annotator/configuration/video_annotator_config_command"}},p={},c=[{value:"Custom annotator versions",id:"custom-annotator-versions",level:2},{value:"Dynamic annotator config",id:"dynamic-annotator-config",level:2},{value:"Tokens extrapolation",id:"tokens-extrapolation",level:4},{value:"Generate token sets with <code>--update-file-location-values</code>",id:"generate-token-sets-with---update-file-location-values",level:4},{value:"Generate separate token values with <code>--update-file-location-values</code>",id:"generate-separate-token-values-with---update-file-location-values",level:4},{value:"Mturk Task Preview",id:"mturk-task-preview",level:4},{value:"Dynamic annotator config example",id:"dynamic-annotator-config-example",level:2},{value:"Separate token values config",id:"separate-token-values-config",level:4},{value:"Token values config",id:"token-values-config",level:4},{value:"Annotator config",id:"annotator-config",level:4},{value:"Task data config",id:"task-data-config",level:4}],d={toc:c};function k(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"multiple-annotator-versions"},"Multiple annotator versions"),(0,i.kt)("p",null,"The simplest Task scenario is showing the same exact annotator to all of your workers. In that case you need to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Compose ",(0,i.kt)("inlineCode",{parentName:"li"},"task_data.json")," file containing definition of a single annotator (and place it into VideoAnnotator config folder)"),(0,i.kt)("li",{parentName:"ul"},"Optionally, verify your config: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator config --verify")),(0,i.kt)("li",{parentName:"ul"},"Run VideoAnnotator: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator"))),(0,i.kt)("p",null,"But suppose you wish to show a slightly different version of the annotator to your workers. You can do so by defining multiple annotator versions. VideoAnnotator provides several ways of doing so."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"custom-annotator-versions"},"Custom annotator versions"),(0,i.kt)("p",null,"If your annotator versions vary considerably (e.g. showing different video URLs), you should do the following steps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Populate these annotator versions into ",(0,i.kt)("inlineCode",{parentName:"li"},"task_data.json")," file manually (it will be basically a JSON array of N individual annotator versions configs)"),(0,i.kt)("li",{parentName:"ul"},"Optionally, verify your config: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator config --verify")),(0,i.kt)("li",{parentName:"ul"},"Run VideoAnnotator: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator"))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"As a result, for each Task assignment Mephisto will automatically produce N units, each unit having a different annotator version. In total, you will be collecting data from ",(0,i.kt)("inlineCode",{parentName:"em"},"N * units_per_assignment")," workers.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"dynamic-annotator-config"},"Dynamic annotator config"),(0,i.kt)("p",null,"If your annotator versions vary only slightly (e.g. same video URLs, but showing different instructions), you should use a dynamic annotator config as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ensure you populate these files, and place them into your VideoAnnotator config folder:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unit_config.json"),": tokenized annotator config - same as regular annotator config, except it will contain tokens within certain objects' attributes (see ",(0,i.kt)("a",{parentName:"li",href:"#tokens-extrapolation"},"Tokens extrapolation"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"token_sets_values_config.json"),": file containing sets of token values, where each set is used to generate one version of the annotator (and each annotator version will be completed by ",(0,i.kt)("inlineCode",{parentName:"li"},"units_per_assignment")," different workers)."))),(0,i.kt)("li",{parentName:"ul"},"Optionally, verify your files: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator config --verify")),(0,i.kt)("li",{parentName:"ul"},"Generate task data config: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator config --extrapolate-token-sets"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This will overwrite existing ",(0,i.kt)("inlineCode",{parentName:"li"},"task_data.json")," file with auto-generated annotator versions, by extrapolating provided token sets values"))),(0,i.kt)("li",{parentName:"ul"},"Run VideoAnnotator: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator"))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"The number of generated annotator versions N will be same as number of provided token sets. In total, you will be collecting data from ",(0,i.kt)("inlineCode",{parentName:"em"},"N * units_per_assignment")," workers.")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"tokens-extrapolation"},"Tokens extrapolation"),(0,i.kt)("p",null,"How does token extrapolation work?"),(0,i.kt)("p",null,'A token is a named text placeholder that gets replaced ("extrapolated") by values specified in ',(0,i.kt)("inlineCode",{parentName:"p"},"token_sets_values_config.json")," (each set of token values produces one annotator version based on dynamic annotator config ",(0,i.kt)("inlineCode",{parentName:"p"},"unit_config.json"),")."),(0,i.kt)("p",null,"Token placeholders within an attribute are formatted like so: ",(0,i.kt)("inlineCode",{parentName:"p"},"{{TOKEN_NAME}}")),(0,i.kt)("p",null,"Tokens can be placed within the following object attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"help")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"instruction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tooltip")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"video"))),(0,i.kt)("p",null,"If you wish to reuse the same token across different annotator attributes and levels, it's enough to specify it in a set of token values just once. (This also means that token names must be unique within token values sets)"),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"generate-token-sets-with---update-file-location-values"},"Generate token sets with ",(0,i.kt)("inlineCode",{parentName:"h4"},"--update-file-location-values")),(0,i.kt)("p",null,"In a special case when all of your tokens sets are simply permutations of several value lists, sets of token values can be easily auto-generated."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Populate your lists of values for every separate token into ",(0,i.kt)("inlineCode",{parentName:"li"},"separate_token_values_config.json")," file"),(0,i.kt)("li",{parentName:"ul"},"Optionally, verify your config: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator config --verify")),(0,i.kt)("li",{parentName:"ul"},"Generate ",(0,i.kt)("inlineCode",{parentName:"li"},"token_sets_values_config.json")," with command: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator config --permutate-separate-tokens"))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},'"Permutation" means all possible combinations of values. For example, permutations of amounts ',(0,i.kt)("inlineCode",{parentName:"em"},"2, 3"),", sizes ",(0,i.kt)("inlineCode",{parentName:"em"},"big")," and animals ",(0,i.kt)("inlineCode",{parentName:"em"},"cats, dogs")," will produce result ",(0,i.kt)("inlineCode",{parentName:"em"},"2 big cats, 2 big dogs, 3 big cats, 3 big dogs"),".")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"generate-separate-token-values-with---update-file-location-values"},"Generate separate token values with ",(0,i.kt)("inlineCode",{parentName:"h4"},"--update-file-location-values")),(0,i.kt)("p",null,"In a special case when one of your tokens is an S3 file URL, that token values can be easily auto-generated."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Make a public S3 folder that will contain only the files that you want (all of them)"),(0,i.kt)("li",{parentName:"ul"},"Run command: ",(0,i.kt)("inlineCode",{parentName:"li"},"mephisto video_annotator --update-file-location-values S3_FOLDER_URL")),(0,i.kt)("li",{parentName:"ul"},"As a result, a token with name ",(0,i.kt)("inlineCode",{parentName:"li"},'"file_location"')," will be added to your ",(0,i.kt)("inlineCode",{parentName:"li"},"separate_token_values_config.json")," config file. Its values will be S3 URLs of all files found .recursively within the ",(0,i.kt)("inlineCode",{parentName:"li"},"S3_FOLDER_URL"))),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"mturk-task-preview"},"Mturk Task Preview"),(0,i.kt)("p",null,"For Tasks run with Mechanical Turk provider, VideoAnnotator generates a Task preview (a small HTML snippet shown to worker prior to starting the task). This Task review comprises HTML content of ",(0,i.kt)("inlineCode",{parentName:"p"},"annotator")," object's attributes ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"instruction"),"."),(0,i.kt)("p",null,"However, note that the task preview is inherently static, therefore:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"we always take the first annotator version in ",(0,i.kt)("inlineCode",{parentName:"li"},"data_task.json")," to generate Task preview for all annotator versions"),(0,i.kt)("li",{parentName:"ul"},"we erase dynamic tokens from the Task review content")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"dynamic-annotator-config-example"},"Dynamic annotator config example"),(0,i.kt)("p",null,"Putting it altogether, this is a brief example of composing a dynamic annotator config."),(0,i.kt)("h4",{id:"separate-token-values-config"},"Separate token values config"),(0,i.kt)("p",null,"Let's start with separate token values in ",(0,i.kt)("inlineCode",{parentName:"p"},"separate_token_values_config.json")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "actor": ["Carrie Fisher", "Mark Hamill"],\n  "movie_name": ["Star Wars"]\n}\n')),(0,i.kt)("h4",{id:"token-values-config"},"Token values config"),(0,i.kt)("p",null,"Permutating these token values will produce this ",(0,i.kt)("inlineCode",{parentName:"p"},"unit_config.json")," file with token sets values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "tokens_values": {\n      "actor": "Carrie Fisher",\n      "movie_name": "Star Wars"\n    }\n  },\n  {\n    "tokens_values": {\n      "actor": "Mark Hamill",\n      "movie_name": "Star Wars"\n    }\n  },\n]\n')),(0,i.kt)("p",null,"Example of config after using ",(0,i.kt)("inlineCode",{parentName:"p"},'--update-file-location-values "https://s3.amazonaws.com/...." --use_presigned_urls')," params:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "tokens_values": {\n      "file_location": "{{getPresignedUrl(\\"https://s3.amazonaws.com/1.jpg\\")}}"\n    }\n  },\n  {\n    "tokens_values": {\n      "file_location": "{{getPresignedUrl(\\"https://s3.amazonaws.com/2.jpg\\")}}"\n    }\n  },\n]\n')),(0,i.kt)("h4",{id:"annotator-config"},"Annotator config"),(0,i.kt)("p",null,"These tokens are placed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"unit_config.json")," dynamic annotator config like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "instruction": "Write what {{actor}} tells in movie <b>\'{{movie_name}}\'</b>",\n  ...\n}\n')),(0,i.kt)("h4",{id:"task-data-config"},"Task data config"),(0,i.kt)("p",null,"After extrapolating attributes from ",(0,i.kt)("inlineCode",{parentName:"p"},"unit_config.json")," with token sets from ",(0,i.kt)("inlineCode",{parentName:"p"},"token_sets_values_config.json"),", we get the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"task_data.json")," file used for the task:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// First extrapolated annotator version\n{\n  ...\n  "instruction": "Write what Carrie Fisher tells in movie <b>\'Star Wars\'</b>",\n  ...\n}\n// Second extrapolated annotator version\n{\n  ...\n  "instruction": "Write what Mark Hamill tells in movie <b>\'Star Wars\'</b>",\n  ...\n}\n')))}k.isMDXComponent=!0}}]);