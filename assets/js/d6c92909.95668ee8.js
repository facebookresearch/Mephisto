"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[8487],{4127:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(1987);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(t),d=o,m=l["".concat(c,".").concat(d)]||l[d]||f[d]||i;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2693:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return l}});var r=t(9375),o=t(8933),i=(t(1987),t(4127)),a=["components"],s={},c=void 0,u={unversionedId:"guides/how_to_use/efficiency_organization/reusing_configs",id:"guides/how_to_use/efficiency_organization/reusing_configs",title:"reusing_configs",description:"\x3c!---",source:"@site/docs/guides/how_to_use/efficiency_organization/reusing_configs.md",sourceDirName:"guides/how_to_use/efficiency_organization",slug:"/guides/how_to_use/efficiency_organization/reusing_configs",permalink:"/docs/guides/how_to_use/efficiency_organization/reusing_configs",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/how_to_use/efficiency_organization/reusing_configs.md",tags:[],version:"current",frontMatter:{},sidebar:"guides",previous:{title:"metrics_dashboarding",permalink:"/docs/guides/how_to_use/efficiency_organization/metrics_dashboarding"},next:{title:"backend_development",permalink:"/docs/guides/how_to_contribute/backend_development"}},p={},l=[{value:"sidebar_position: 1",id:"sidebar_position-1",level:2}],f={toc:l};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"sidebar_position-1"},"sidebar_position: 1"),(0,i.kt)("h1",{id:"use-the-same-configs-across-tasks"},"Use the same configs across tasks"),(0,i.kt)("p",null,"As you begin launching many Mephisto tasks, you may find that there are some specific argument options that you frequently use ",(0,i.kt)("em",{parentName:"p"},"across")," multiple tasks. Mephisto provides a way to reuse these types of configurations with ",(0,i.kt)("inlineCode",{parentName:"p"},"profile"),"s."),(0,i.kt)("p",null,"Setting up profiles is pretty easy, and makes it so that you don't have to be writing architect and crowdprovider args on every launch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python run_task.py mephisto/architect=heroku mephisto/provider=mturk_sandbox mephisto.provider.requester_name=MY_REQUESTER\n")),(0,i.kt)("p",null,"Instead you can move these common configurations into a file in your ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.mephisto/hydra_configs/profile")," dir. "),(0,i.kt)("p",null,"With this, you can do something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# profile/local_testing.yaml\n# @package _global_\nmephisto:\n  architect:\n    _architect_type: local\n    port: 1234\n  provider:\n    _provider_type: mock\n\n# profile/internal_sharing.yaml\n# @package _global_\nmephisto:\n  architect:\n    _architect_type: heroku\n    use_hobby: false\n  provider:\n    _provider_type: mock\n\n# profile/prelaunch_test.yaml\n# @package _global_\nmephisto:\n  architect:\n    _architect_type: heroku\n    use_hobby: false\n  provider:\n    _provider_type: mturk_sandbox\n    requester_name: MY_REQUESTER_sandbox\n\n# profile/live_launch.yaml\n# @package _global_\nmephisto:\n  architect:\n    _architect_type: heroku\n    use_hobby: true\n  provider:\n    _provider_type: mturk\n    requester_name: MY_REQUESTER\n")),(0,i.kt)("p",null,"Then augmenting your launch configs is as easy as doing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python run_task.py +profile=local_testing\n...\npython run_task.py +profile=live_launch\n")),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"profile")," can be an effective way to simplify the configuration for your most common workflows."))}d.isMDXComponent=!0}}]);