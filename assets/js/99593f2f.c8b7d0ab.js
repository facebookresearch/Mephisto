"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[2303],{4127:function(e,t,o){o.d(t,{Zo:function(){return c},kt:function(){return f}});var r=o(1987);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var u=r.createContext({}),l=function(e){var t=r.useContext(u),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(o),d=n,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||i;return o?r.createElement(f,a(a({ref:t},c),{},{components:o})):r.createElement(f,a({ref:t},c))}));function f(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,a=new Array(i);a[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:n,a[1]=s;for(var l=2;l<i;l++)a[l]=o[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},24:function(e,t,o){o.r(t),o.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=o(9375),n=o(8933),i=(o(1987),o(4127)),a=["components"],s={sidebar_position:6},u="Run form-based tasks",l={unversionedId:"guides/tutorials/form_composer",id:"guides/tutorials/form_composer",title:"Run form-based tasks",description:"If your task has questionnaire format, you can build it out-of-the box with no custom code, by using our FormComposer task generator. All you need to do is to specify your JSON-based form configuration, and run a few commands.",source:"@site/docs/guides/tutorials/form_composer.md",sourceDirName:"guides/tutorials",slug:"/guides/tutorials/form_composer",permalink:"/docs/guides/tutorials/form_composer",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/tutorials/form_composer.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"guides",previous:{title:"Reviewing task results",permalink:"/docs/guides/tutorials/review_app"},next:{title:"Developing and debugging frontends",permalink:"/docs/guides/how_to_use/task_creation/developing_frontends"}},c={},p=[{value:"Run with docker",id:"run-with-docker",level:2},{value:"Access Task units",id:"access-task-units",level:2},{value:"Further Details",id:"further-details",level:2}],m={toc:p};function d(e){var t=e.components,o=(0,n.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"run-form-based-tasks"},"Run form-based tasks"),(0,i.kt)("p",null,"If your task has questionnaire format, you can build it out-of-the box with no custom code, by using our FormComposer task generator. All you need to do is to specify your JSON-based form configuration, and run a few commands."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Form layout is mobile-screen compatible; it's based on Bootstrap and displays content organized into form sections, fieldsets, fields, etc"),(0,i.kt)("li",{parentName:"ul"},"Standard form behaviours include URL presigning (for data security), collapsible form sections, and fields validation"),(0,i.kt)("li",{parentName:"ul"},"Optionally, you can customize form behaviour with JS code insertions to enable:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"custom field validators (e.g. check text against a dictionary of forbidden words)"),(0,i.kt)("li",{parentName:"ul"},"custom field triggers (e.g. toggle a form field based upon value provided in another field)")))),(0,i.kt)("h2",{id:"run-with-docker"},"Run with docker"),(0,i.kt)("p",null,"To launch a form-based Task from within a Docker container follow these steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Prepare and validate your config files as described in ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/how_to_use/form_composer/configuration/setup/"},"FormComposer config files")," and\n",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/how_to_use/form_composer/running/#using-form_composer_config-utility"},"FormComposer config utils")," sections")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Launch your form-based Task (see details in ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/how_to_use/form_composer/running/"},"Running FormComposer task"),"). For a lcal testing scenario, we will run:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f docker/docker-compose.dev.yml run \\\n    --build \\\n    --publish 8081:8000 \\\n    --publish 3001:3000 \\\n    --rm mephisto_dc \\\n    mephisto form_composer\n")),(0,i.kt)("h2",{id:"access-task-units"},"Access Task units"),(0,i.kt)("p",null,"Once your Task launches, your console will display you URLs like this: ",(0,i.kt)("inlineCode",{parentName:"p"},"http://<YOUR_DOMAIN>/?worker_id=x&assignment_id=1"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you're doing local testing with ",(0,i.kt)("inlineCode",{parentName:"li"},"local")," architect and ",(0,i.kt)("inlineCode",{parentName:"li"},"mock")," provider, your URLs will start with ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:3000/"),". To access your Task units as a worker, just paste one of these URLs into your browser.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"If running with Docker, you will need to replace port ",(0,i.kt)("inlineCode",{parentName:"em"},"3000")," in the console URLs with the remapped port (e.g. for ",(0,i.kt)("inlineCode",{parentName:"em"},"3001:3000")," it will be ",(0,i.kt)("inlineCode",{parentName:"em"},"3001"),").")))),(0,i.kt)("li",{parentName:"ul"},"If you're running with a \"real\" provider, to access your Task units you will need to log into the provider's platform as a worker, and find them there.")),(0,i.kt)("h2",{id:"further-details"},"Further Details"),(0,i.kt)("p",null,"Learn more in our FormComposer guide:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/how_to_use/form_composer/overview/"},"FormComposer overview")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/how_to_use/form_composer/running/"},"Run FormComposer tasks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/how_to_use/form_composer/configuration/setup/"},"Configure FormComposer tasks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/how_to_use/form_composer/embedding/"},"Embed FormComposer into custom application"))))}d.isMDXComponent=!0}}]);