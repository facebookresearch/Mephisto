"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[2671],{4127:function(e,t,i){i.d(t,{Zo:function(){return u},kt:function(){return m}});var n=i(1987);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(i),c=a,m=d["".concat(l,".").concat(c)]||d[c]||k[c]||r;return i?n.createElement(m,o(o({ref:t},u),{},{components:i})):n.createElement(m,o({ref:t},u))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=i[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}c.displayName="MDXCreateElement"},90:function(e,t,i){i.r(t),i.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var n=i(9375),a=i(8933),r=(i(1987),i(4127)),o=["components"],s={sidebar_position:4},l="TaskReview app API",p={unversionedId:"guides/how_to_use/review_app/server_api",id:"guides/how_to_use/review_app/server_api",title:"TaskReview app API",description:"If you wish to customize or improve the TaskReview app, it's helpful to know how its UI and server parts interact.",source:"@site/docs/guides/how_to_use/review_app/server_api.md",sourceDirName:"guides/how_to_use/review_app",slug:"/guides/how_to_use/review_app/server_api",permalink:"/docs/guides/how_to_use/review_app/server_api",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/how_to_use/review_app/server_api.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guides",previous:{title:"Enable unit preview in TaskReview app",permalink:"/docs/guides/how_to_use/review_app/enabling_original_unit_preview"},next:{title:"FormComposer overview",permalink:"/docs/guides/how_to_use/form_composer/overview"}},u={},d=[{value:"User flow",id:"user-flow",level:2},{value:"API endpoints",id:"api-endpoints",level:2},{value:"<code>GET /api/tasks</code>",id:"get-apitasks",level:3},{value:"<code>GET /api/tasks/{id}</code>",id:"get-apitasksid",level:3},{value:"<code>GET /api/tasks/{id}/export-results</code>",id:"get-apitasksidexport-results",level:3},{value:"<code>GET /api/tasks/{id}/{n_units}/export-results.json</code>",id:"get-apitasksidn_unitsexport-resultsjson",level:3},{value:"<code>GET /api/tasks/{id}/worker-units-ids</code>",id:"get-apitasksidworker-units-ids",level:3},{value:"<code>GET /api/qualifications</code>",id:"get-apiqualifications",level:3},{value:"<code>POST /api/qualifications</code>",id:"post-apiqualifications",level:3},{value:"<code>GET /api/qualifications/{id}/workers?{task_id=}</code>",id:"get-apiqualificationsidworkerstask_id",level:3},{value:"<code>POST /api/qualifications/{id}/workers/{id}/grant</code>",id:"post-apiqualificationsidworkersidgrant",level:3},{value:"<code>POST /api/qualifications/{id}/workers/{id}/revoke</code>",id:"post-apiqualificationsidworkersidrevoke",level:3},{value:"<code>GET /api/units?{task_id=}{unit_ids=}</code>",id:"get-apiunitstask_idunit_ids",level:3},{value:"<code>GET /api/units/details?{unit_ids=}</code>",id:"get-apiunitsdetailsunit_ids",level:3},{value:"<code>POST /api/units/approve</code>",id:"post-apiunitsapprove",level:3},{value:"<code>POST /api/units/reject</code>",id:"post-apiunitsreject",level:3},{value:"<code>POST /api/units/soft-reject</code>",id:"post-apiunitssoft-reject",level:3},{value:"<code>POST /api/workers/{id}/block</code>",id:"post-apiworkersidblock",level:3},{value:"<code>GET /api/workers/{id}/qualifications</code>",id:"get-apiworkersidqualifications",level:3},{value:"<code>GET /api/stats?{task_id=}{worker_id=}{since=}{limit=}</code>",id:"get-apistatstask_idworker_idsincelimit",level:3},{value:"<code>GET /api/units/{unit_id}/static/{filename}</code>",id:"get-apiunitsunit_idstaticfilename",level:3},{value:"Error response",id:"error-response",level:3}],k={toc:d};function c(e){var t=e.components,i=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},k,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"taskreview-app-api"},"TaskReview app API"),(0,r.kt)("p",null,"If you wish to customize or improve the TaskReview app, it's helpful to know how its UI and server parts interact."),(0,r.kt)("h2",{id:"user-flow"},"User flow"),(0,r.kt)("p",null,"Here is a typical user journey through TaskReview app:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"UI gets list of available tasks from ",(0,r.kt)("inlineCode",{parentName:"li"},"GET /tasks")),(0,r.kt)("li",{parentName:"ul"},"User selects a task"),(0,r.kt)("li",{parentName:"ul"},"UI gets list of available qualifications from ",(0,r.kt)("inlineCode",{parentName:"li"},"GET /qualifications")),(0,r.kt)("li",{parentName:"ul"},"UI pulls all unit-worker id pairs from  ",(0,r.kt)("inlineCode",{parentName:"li"},"GET /tasks/{id}/worker-units-ids"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Due to the need to randomly shuffle units grouped by a worker (to mitigate reviewers bias, etc) we're implementing client-side, not server-side, pagination - client gets full list of all ids, creates a page of unit ids, and then pulls data for those specific units.")))),(0,r.kt)("li",{parentName:"ul"},"UI initiates units review by worker:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Group units by worker"),(0,r.kt)("li",{parentName:"ul"},"Sort workers by number of their units (fewest units go first)"),(0,r.kt)("li",{parentName:"ul"},"Pick them for review one-by-one"))),(0,r.kt)("li",{parentName:"ul"},"And then for each worker:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"UI pulls units by ids from ",(0,r.kt)("inlineCode",{parentName:"li"},"GET /units?unit_ids=[...]")),(0,r.kt)("li",{parentName:"ul"},"UI sorts units by ",(0,r.kt)("inlineCode",{parentName:"li"},"creation_date")," and pick them for review one-by-one",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For each reviewed unit:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"UI pulls unit details from ",(0,r.kt)("inlineCode",{parentName:"li"},"GET /units/details?unit_ids=[...]")),(0,r.kt)("li",{parentName:"ul"},"UI pulls current stats from ",(0,r.kt)("inlineCode",{parentName:"li"},"GET /stats")," (for entire task and for worker within the task)"),(0,r.kt)("li",{parentName:"ul"},"UI renders unit's review representation in an iframe"),(0,r.kt)("li",{parentName:"ul"},"User can choose to reject/accept unit, grant/revoke qualification, and block the worker"))))))),(0,r.kt)("li",{parentName:"ul"},'When all units are reviewed, UI redirects user to the "Tasks" page'),(0,r.kt)("li",{parentName:"ul"},'User clicks "Download" button for a reviewed Task',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"UI pulls Task data from ",(0,r.kt)("inlineCode",{parentName:"li"},"GET /tasks/<task_id>/<n_units>/export-results.json")," endpoint")))),(0,r.kt)("h2",{id:"api-endpoints"},"API endpoints"),(0,r.kt)("p",null,"These are the API specs enabling TaskReview app UI."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apitasks"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/tasks")),(0,r.kt)("p",null,"Get all available tasks (to select one for review)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "tasks": [\n        {\n            "id": <int>,\n            "name": <str>,\n            "is_reviewed": <bool>,\n            "unit_count": <int>,\n            "created_at": <timestamp>\n        },\n        ...  // more tasks\n    ]\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apitasksid"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/tasks/{id}")),(0,r.kt)("p",null,"Get metadata for a task"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "id": <int>,\n    "name": <str>,\n    "type": <str>,\n    "created_at": <timestamp>\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apitasksidexport-results"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/tasks/{id}/export-results")),(0,r.kt)("p",null,"Compose on the server-side a single file with reviewed task results (empty API response)."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apitasksidn_unitsexport-resultsjson"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/tasks/{id}/{n_units}/export-results.json")),(0,r.kt)("p",null,"Serve a single composed file with reviewed task results (API response is a file download)."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apitasksidworker-units-ids"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/tasks/{id}/worker-units-ids")),(0,r.kt)("p",null,"Get full, unpaginated list of unit IDs within a task (for subsequent client-side grouping by worker_id and ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /task-units")," pagination)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "worker_units_ids": [\n        {\n            "worker_id": <int>,\n            "unit_id": <int>,\n        },\n        ...  // more ids\n    ]\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apiqualifications"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/qualifications")),(0,r.kt)("p",null,'Get all available qualifications (to select "approve" and "reject" qualifications)'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "qualifications": [\n        {\n            "id": <int>,\n            "name": <str>,\n        },\n        ...  // more qualifications\n    ]\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"post-apiqualifications"},(0,r.kt)("inlineCode",{parentName:"h3"},"POST /api/qualifications")),(0,r.kt)("p",null,"Create a new qualification"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "name": <str>,\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apiqualificationsidworkerstask_id"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/qualifications/{id}/workers?{task_id=}")),(0,r.kt)("p",null,"Get list of all bearers of a qualification."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "workers": [\n        {\n            "worker_id": <int>,\n            "value": <int>,\n            "unit_review_id": <int>,  // latest grant of this qualification\n            "granted_at": <int>,   // maps to `unit_review.creation_date` column\n        },\n        ...  // more qualified workers\n    ]\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"post-apiqualificationsidworkersidgrant"},(0,r.kt)("inlineCode",{parentName:"h3"},"POST /api/qualifications/{id}/workers/{id}/grant")),(0,r.kt)("p",null,"Grant qualification to a worker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "unit_ids": [<int>, ...],\n    "value": <int>,\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"post-apiqualificationsidworkersidrevoke"},(0,r.kt)("inlineCode",{parentName:"h3"},"POST /api/qualifications/{id}/workers/{id}/revoke")),(0,r.kt)("p",null,"Revoke qualification from a worker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "unit_ids": [<int>, ...],\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apiunitstask_idunit_ids"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/units?{task_id=}{unit_ids=}")),(0,r.kt)("p",null,"Get workers' results (filtered by task_id and/or unit_ids, etc) - without full details of input/output. At least one filtering parameter must be specified"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"NOTE: this edpoint is not currently used in TaskReview app")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "units": [\n        {\n            "id": <int>,\n            "worker_id": <int>,\n            "task_id": <int>,\n            "pay_amount": <int>,\n            "status": <str>,\n            "creation_date": <int>,\n            "results": {\n                "start": ,\n                "end": ,\n                "inputs_preview": <json str>,  // optional\n                "outputs_preview": <json str>,  // optional\n            },\n            "review": {\n                "tips": <int>,\n                "feedback": <str>,\n            }\n        },\n        ...  // more units\n    ]\n}\n')),(0,r.kt)("h3",{id:"get-apiunitsdetailsunit_ids"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/units/details?{unit_ids=}")),(0,r.kt)("p",null,"Get full input for specified workers results (",(0,r.kt)("inlineCode",{parentName:"p"},"units_ids")," parameter is mandatory)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "units": [\n        {\n            "has_task_source_review": <bool>,\n            "id": <int>,\n            "inputs": <json object>,  // instructions for worker\n            "outputs": <json object>,  // response from worker\n            "prepared_inputs": <json object>,  // prepared instructions from worker\n            "unit_data_folder": <str>},  // path to data dir in file system\n        },\n        ...  // more units\n    ]\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"post-apiunitsapprove"},(0,r.kt)("inlineCode",{parentName:"h3"},"POST /api/units/approve")),(0,r.kt)("p",null,"Approve worker's result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "unit_ids": [<int>, ...],\n    "feedback": <str>,  // optional\n    "tips": <int>,  // optional\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"post-apiunitsreject"},(0,r.kt)("inlineCode",{parentName:"h3"},"POST /api/units/reject")),(0,r.kt)("p",null,"Reject worker's result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "unit_ids": [<int>, ...],\n    "feedback": <str>,  // optional\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"post-apiunitssoft-reject"},(0,r.kt)("inlineCode",{parentName:"h3"},"POST /api/units/soft-reject")),(0,r.kt)("p",null,"Soft-reject worker's result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "unit_ids": [<int>, ...],\n    "feedback": <str>,  // optional\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"post-apiworkersidblock"},(0,r.kt)("inlineCode",{parentName:"h3"},"POST /api/workers/{id}/block")),(0,r.kt)("p",null,"Permanently block a worker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "unit_id": <int>,\n    "feedback": <str>,\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apiworkersidqualifications"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/workers/{id}/qualifications")),(0,r.kt)("p",null,"Get list of all granted qualifications for a worker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "granted_qualifications": [\n        {\n            "worker_id": <int>,\n            "qualification_id": <int>,\n            "value": <int>,\n            "granted_at": <int>,  // maps to `unit_review.creation_date` column\n        }\n    ],\n    ...  // more granted qualifications\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apistatstask_idworker_idsincelimit"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/stats?{task_id=}{worker_id=}{since=}{limit=}")),(0,r.kt)("p",null,"Get stats of (recent) approvals. Either ",(0,r.kt)("inlineCode",{parentName:"p"},"task_id")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"worker_id")," (or both) must be present."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "stats": {\n        "total_count": <int>,  // within the scope of the filters\n        "reviewed_count": <int>,\n        "approved_count": <int>,\n        "rejected_count": <int>,\n        "soft_rejected_count": <int>,\n    },\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"get-apiunitsunit_idstaticfilename"},(0,r.kt)("inlineCode",{parentName:"h3"},"GET /api/units/{unit_id}/static/{filename}")),(0,r.kt)("p",null,"Return static file from ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," directory for specific unit."),(0,r.kt)("p",null,"Response: file."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"error-response"},"Error response"),(0,r.kt)("p",null,"Exception are returned by the API in this format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "error": <str>,\n}\n')))}c.isMDXComponent=!0}}]);