"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[1107],{4127:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return f}});var n=a(1987);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(a),c=r,f=u["".concat(p,".").concat(c)]||u[c]||m[c]||o;return a?n.createElement(f,i(i({ref:t},d),{},{components:a})):n.createElement(f,i({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8234:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var n=a(9375),r=a(8933),o=(a(1987),a(4127)),i=["components"],l={sidebar_position:2},p="Reference",s={unversionedId:"guides/how_to_use/data_porter/reference",id:"guides/how_to_use/data_porter/reference",title:"Reference",description:"This is a reference describing set of commands under the mephisto db command group.",source:"@site/docs/guides/how_to_use/data_porter/reference.md",sourceDirName:"guides/how_to_use/data_porter",slug:"/guides/how_to_use/data_porter/reference",permalink:"/docs/guides/how_to_use/data_porter/reference",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/how_to_use/data_porter/reference.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guides",previous:{title:"Simple usage",permalink:"/docs/guides/how_to_use/data_porter/simple_usage"},next:{title:"Custom conflict resolver",permalink:"/docs/guides/how_to_use/data_porter/custom_conflict_resolver"}},d={},u=[{value:"Export",id:"export",level:2},{value:"Import",id:"import",level:2},{value:"Backup",id:"backup",level:2},{value:"Restore",id:"restore",level:2},{value:"Important notes",id:"important-notes",level:2},{value:"Data dump vs backup",id:"data-dump-vs-backup",level:3},{value:"Legacy PKs",id:"legacy-pks",level:3}],m={toc:u};function c(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reference"},"Reference"),(0,o.kt)("p",null,"This is a reference describing set of commands under the ",(0,o.kt)("inlineCode",{parentName:"p"},"mephisto db")," command group."),(0,o.kt)("h2",{id:"export"},"Export"),(0,o.kt)("p",null,"This command exports data from Mephisto DB and provider-specific datastores\nas an archived combination of (i) a JSON file, and (ii) a ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," catalog with related files."),(0,o.kt)("p",null,"If no parameter passed, full data dump (i.e. backup) will be created."),(0,o.kt)("p",null,"To pass a list of values for one command option, simply repeat that option name before each value."),(0,o.kt)("p",null,"Examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mephisto db export\nmephisto db export --verbosity\nmephisto db export --export-tasks-by-names "My first Task"\nmephisto db export --export-tasks-by-ids 1 --export-tasks-by-ids 2\nmephisto db export --export-task-runs-by-ids 3 --export-task-runs-by-ids 4\nmephisto db export --export-task-runs-since-date 2024-01-01\nmephisto db export --export-task-runs-since-date 2023-01-01T00:00:00\nmephisto db export --labels first_dump --labels second_dump\nmephisto db export --export-tasks-by-ids 1 --delete-exported-data --randomize-legacy-ids --export-indent 4\n')),(0,o.kt)("p",null,"Options (all optional):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-tn/--export-tasks-by-names")," - names of Tasks that will be exported"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-ti/--export-tasks-by-ids")," - ids of Tasks that will be exported"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-tri/--export-task-runs-by-ids")," - ids of TaskRuns that will be exported"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-trs/--export-task-runs-since-date")," - only objects created after this ISO8601 datetime will be exported"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-l/--labels")," - only data imported under these labels will be exported"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-del/--delete-exported-data")," - after exporting data, delete it from local DB"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-r/--randomize-legacy-ids")," - replace legacy autoincremented ids with\nnew pseudo-random ids to avoid conflicts during data merging"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-i/--export-indent")," - make dump easy to read via formatting JSON with indentations (Default 2)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-v/--verbosity")," - write more informative messages about progress (Default 0. Values: 0, 1)")),(0,o.kt)("p",null,"Note that the following options cannot be used together:\n",(0,o.kt)("inlineCode",{parentName:"p"},"--export-tasks-by-names"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"--export-tasks-by-ids"),",  ",(0,o.kt)("inlineCode",{parentName:"p"},"--export-task-runs-by-ids"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"--export-task-runs-since-date"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"--labels"),"."),(0,o.kt)("h2",{id:"import"},"Import"),(0,o.kt)("p",null,"This command imports data from a dump file created by ",(0,o.kt)("inlineCode",{parentName:"p"},"mephisto db export")," command."),(0,o.kt)("p",null,"Examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mephisto db import --file <dump_file_name_or_path>\n\nmephisto db import --file 2024_01_01_00_00_01_mephisto_dump.json --verbosity\nmephisto db import --file 2024_01_01_00_00_01_mephisto_dump.json --labels my_first_dump\nmephisto db import --file 2024_01_01_00_00_01_mephisto_dump.json --conflict-resolver MyCustomMergeConflictResolver\nmephisto db import --file 2024_01_01_00_00_01_mephisto_dump.json --keep-import-metadata\n")),(0,o.kt)("p",null,"Options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-f/--file")," - location of the ",(0,o.kt)("inlineCode",{parentName:"li"},"***.zip")," dump file (filename if created in\n",(0,o.kt)("inlineCode",{parentName:"li"},"<MEPHISTO_REPO>/outputs/export")," folder, or absolute filepath)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-cr/--conflict-resolver")," (Optional) - name of Python class to be used for resolving merging conflicts\n(when your local DB already has a row with same unique field value as a DB row in the dump data)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-l/--labels")," - one or more short strings serving as a reference for the ported data (stored in ",(0,o.kt)("inlineCode",{parentName:"li"},"imported_data")," table),\nso later you can export the imported data with ",(0,o.kt)("inlineCode",{parentName:"li"},"--labels")," export option"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-k/--keep-import-metadata")," - write data from ",(0,o.kt)("inlineCode",{parentName:"li"},"imported_data")," table of the dump (by default it's not imported)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-v/--verbosity")," - level of logging (default: 0; values: 0, 1)")),(0,o.kt)("p",null,"Note that before every import we create a full snapshot copy of your local data, by\narchiving content of your ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," directory. If any data gets corrupte during the import,\nyou can always return to the original state by replacing your ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," folder with the snaphot."),(0,o.kt)("h2",{id:"backup"},"Backup"),(0,o.kt)("p",null,"Creates full backup of all current data (Mephisto DB, provider-specific datastores, and related files) on local machine."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mephisto db backup\n")),(0,o.kt)("h2",{id:"restore"},"Restore"),(0,o.kt)("p",null,"Restores all data (Mephisto DB, provider-specific datastores, and related files) from a backup archive."),(0,o.kt)("p",null,"Note that it will erase all current data, and you may want to run command ",(0,o.kt)("inlineCode",{parentName:"p"},"mephisto db backup")," beforehand."),(0,o.kt)("p",null,"Examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mephisto db restore --file <backup_file_name_or_path>\n\nmephisto db restore --file 2024_01_01_00_10_01.zip\n")),(0,o.kt)("p",null,"Options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-f/--file")," - location of the ",(0,o.kt)("inlineCode",{parentName:"li"},"***.zip")," backup file (filename if created in\n",(0,o.kt)("inlineCode",{parentName:"li"},"<MEPHISTO_REPO>/outputs/backup")," folder, or absolute filepath)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-v/--verbosity")," - level of logging (default: 0; values: 0, 1)")),(0,o.kt)("h2",{id:"important-notes"},"Important notes"),(0,o.kt)("h3",{id:"data-dump-vs-backup"},"Data dump vs backup"),(0,o.kt)("p",null,"Mephisto stores local data in ",(0,o.kt)("inlineCode",{parentName:"p"},"outputs")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," folders. The safest way to back Mephisto up is to create a copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," folder - and that's what a Mephisto backup contains."),(0,o.kt)("p",null,"On the other hand, partial data export is written into a data dump that contains:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a JSON file representing relevant data entries from DB tables"),(0,o.kt)("li",{parentName:"ul"},"a folder with all files related to the exported data entries")),(0,o.kt)("p",null,"With the export command, you ",(0,o.kt)("strong",{parentName:"p"},"can")," create a dump of the entire data as well, and here's when it's useful:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"mephisto db backup")," as the safest option, and if you only intend to restore this data instead of previous one"),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"mephisto db export")," to dump complete data from a small Mephisto project, so it can be imported into a larger Mephisto project later.")),(0,o.kt)("h3",{id:"legacy-pks"},"Legacy PKs"),(0,o.kt)("p",null,"Prior to release ",(0,o.kt)("inlineCode",{parentName:"p"},"v1.4")," of Mephisto, its DB schemas used auto-incremented integer primary keys. While convenient for debugging, it causes problems during data import/export."),(0,o.kt)("p",null,"As of ",(0,o.kt)("inlineCode",{parentName:"p"},"v1.4"),' we have replaced these "legacy" PKs with quazi-random integers (for backward compatibility their values are designed to be above 1,000,000).'),(0,o.kt)("p",null,'If you do wish to use import/export commands with your "legacy" data, include the ',(0,o.kt)("inlineCode",{parentName:"p"},"--randomize-legacy-ids"),' option. It prevents data corruption when merging 2 sets of "legacy" data (because they will contain same integer PKs ',(0,o.kt)("inlineCode",{parentName:"p"},"1, 2, 3,...")," for completely unrelated objects)."),(0,o.kt)("p",null,"This handling of legacy PKs ensures that Data Porter feature is backward compatible, and wll work with your previous existing Mephisto data."))}c.isMDXComponent=!0}}]);