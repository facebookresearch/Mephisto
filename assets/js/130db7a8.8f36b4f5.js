"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[1169],{4127:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var a=n(1987);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(g,r(r({ref:t},c),{},{components:n})):a.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8581:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(9375),i=n(8933),o=(n(1987),n(4127)),r=["components"],l={sidebar_position:4},s="Database migrations",p={unversionedId:"guides/how_to_contribute/db_migrations",id:"guides/how_to_contribute/db_migrations",title:"Database migrations",description:"Overview",source:"@site/docs/guides/how_to_contribute/db_migrations.md",sourceDirName:"guides/how_to_contribute",slug:"/guides/how_to_contribute/db_migrations",permalink:"/docs/guides/how_to_contribute/db_migrations",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/how_to_contribute/db_migrations.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guides",previous:{title:"Backend setup",permalink:"/docs/guides/how_to_contribute/backend_development"},next:{title:"Updating documentation",permalink:"/docs/guides/how_to_contribute/documentation"}},c={},d=[{value:"Overview",id:"overview",level:2},{value:"Details",id:"details",level:2},{value:"Add migration package",id:"add-migration-package",level:3},{value:"Call <code>apply_migrations</code> function",id:"call-apply_migrations-function",level:3},{value:"Maintenance of related code",id:"maintenance-of-related-code",level:2}],m={toc:d};function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"database-migrations"},"Database migrations"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Currently we are not using any special framework for updating Mephisto database or provider-specific datastores.\nThis is how it's done:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Each database should have table ",(0,o.kt)("inlineCode",{parentName:"li"},"migrations")," where we store all applied or failed migrations"),(0,o.kt)("li",{parentName:"ol"},"Every run of any Mephisto command will automatically attempt to apply unapplied migrations"),(0,o.kt)("li",{parentName:"ol"},"Each migration is a Python module that contains one constant (a raw SQL query string)"),(0,o.kt)("li",{parentName:"ol"},"After adding a migration, its constant must be imported and added to the migrations dict\nunder a readable name (dict key) that will be used in ",(0,o.kt)("inlineCode",{parentName:"li"},"migrations")," table"),(0,o.kt)("li",{parentName:"ol"},"Any database implementation, must call function ",(0,o.kt)("inlineCode",{parentName:"li"},"apply_migrations")," in method ",(0,o.kt)("inlineCode",{parentName:"li"},"init_tables")," (after creating all tables).\nNOTE: Migrations must be applied before creating DB indices, as migrations may erase them without restoring."),(0,o.kt)("li",{parentName:"ol"},"When migrations fail, you will see a console log message in console.\nThe error will also be written to ",(0,o.kt)("inlineCode",{parentName:"li"},"migrations")," table under ",(0,o.kt)("inlineCode",{parentName:"li"},"error_message")," column with status ",(0,o.kt)("inlineCode",{parentName:"li"},'"errored"'))),(0,o.kt)("h2",{id:"details"},"Details"),(0,o.kt)("p",null,"Let's see how exactly DB migrations should be created."),(0,o.kt)("p",null,"We'll use Mephisto DB as example; the same set of steps is used for provider-specific databases\n."),(0,o.kt)("h3",{id:"add-migration-package"},"Add migration package"),(0,o.kt)("p",null,"To add a new migration package, follow these steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create Python-package ",(0,o.kt)("inlineCode",{parentName:"p"},"migrations")," next to ",(0,o.kt)("inlineCode",{parentName:"p"},"mephisto/abstractions/databases/local_database.py"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create migration module in that package, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"_001_20240101_add__column_name__in__table_name.py"),".\nNote leading underscore - Python does not allow importing modeuls that start with a number.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Populate module with a SQL query constant:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# <copyright notice>\n\n"""\nThis migration introduces the following changes:\n- ...\n"""\n\nMY_SQL_MIGRATION_QUERY_NAME = """\n    <SQL query>\n"""\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Include this SQL query constant in ",(0,o.kt)("inlineCode",{parentName:"p"},"__init__.py")," module (located next to the migration module):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# <copyright notice>\nfrom ._001_20240101_add__column_name__in__table_name import *\n")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'migrations = {\n    "20240101_add__column_name__in__table_name": MY_SQL_MIGRATION_QUERY_NAME,\n}\n```\n')),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Note that for now we support only forward migrations.\nIf you do need a backward migration, simply add it as a forward migration that would undo the undesired changes.")),(0,o.kt)("h3",{id:"call-apply_migrations-function"},"Call ",(0,o.kt)("inlineCode",{parentName:"h3"},"apply_migrations")," function"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Import migrations in ",(0,o.kt)("inlineCode",{parentName:"p"},"mephisto/abstractions/databases/local_database.py"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"...\nfrom .migrations import migrations\n...\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Apply migrations in ",(0,o.kt)("inlineCode",{parentName:"p"},"LocalMephistoDB"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class LocalMephistoDB(MephistoDB):\n    ...\n    def init_tables(self) -> None:\n        with self.table_access_condition:\n            conn = self.get_connection()\n            conn.execute("PRAGMA foreign_keys = on;")\n\n            with conn:\n                c = conn.cursor()\n                c.execute(tables.CREATE_IF_NOT_EXISTS_PROJECTS_TABLE)\n                ...\n\n            apply_migrations(self, migrations)\n            ...\n\n            with conn:\n                c.executescript(tables.CREATE_IF_NOT_EXISTS_CORE_INDICES)\n            ...\n')))),(0,o.kt)("h2",{id:"maintenance-of-related-code"},"Maintenance of related code"),(0,o.kt)("p",null,"Making changes in databases must be carefully thought through and tested."),(0,o.kt)("p",null,"This is a list of places that will most likely need to be synced with your DB change:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"All queries (involving tables that you have updated) in database class, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"LocalMephistoDB")),(0,o.kt)("li",{parentName:"ol"},"Module with common database queries ",(0,o.kt)("inlineCode",{parentName:"li"},"mephisto/utils/db.py")),(0,o.kt)("li",{parentName:"ol"},"Queries in ",(0,o.kt)("strong",{parentName:"li"},"Review App")," (",(0,o.kt)("inlineCode",{parentName:"li"},"mephisto/review_app/server"),") - it has its own set of specific queries"),(0,o.kt)("li",{parentName:"ol"},"Names/relationships for tables and columns in ",(0,o.kt)("strong",{parentName:"li"},"DBDataPorter")," (they're hardcoded in many places there),\nwithin Mephisto DB and provider-specific databases. For instance:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"mephisto/tools/db_data_porter/constants.py")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"mephisto/tools/db_data_porter/import_dump.py")),(0,o.kt)("li",{parentName:"ul"},"..."))),(0,o.kt)("li",{parentName:"ol"},"Data processing within Mephisto itself (obviously)")),(0,o.kt)("p",null,"While we did our best to abstract away particular tables and fields structure,\nthey still have to be spelled out in some places.\nPlease run tests and check manually all Mephisto applications after performing database changes."))}u.isMDXComponent=!0}}]);