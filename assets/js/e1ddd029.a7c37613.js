"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[5603],{4127:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var o=n(1987);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(n),m=r,f=s["".concat(c,".").concat(m)]||s[m]||d[m]||i;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},531:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var o=n(9375),r=n(8933),i=(n(1987),n(4127)),a=["components"],l={sidebar_position:3},c="Backend setup",p={unversionedId:"guides/how_to_contribute/backend_development",id:"guides/how_to_contribute/backend_development",title:"Backend setup",description:"We use pre-commit to enforce code styles on the code base (using black for Python and prettier for Javascript).",source:"@site/docs/guides/how_to_contribute/backend_development.md",sourceDirName:"guides/how_to_contribute",slug:"/guides/how_to_contribute/backend_development",permalink:"/docs/guides/how_to_contribute/backend_development",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/how_to_contribute/backend_development.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guides",previous:{title:"Frontend setup",permalink:"/docs/guides/how_to_contribute/frontend_development"},next:{title:"Database migrations",permalink:"/docs/guides/how_to_contribute/db_migrations"}},u={},s=[{value:"Local development mode",id:"local-development-mode",level:2}],d={toc:s};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"backend-setup"},"Backend setup"),(0,i.kt)("p",null,"We use ",(0,i.kt)("a",{parentName:"p",href:"https://pre-commit.com/"},"pre-commit")," to enforce code styles on the code base (using ",(0,i.kt)("inlineCode",{parentName:"p"},"black")," for Python and ",(0,i.kt)("inlineCode",{parentName:"p"},"prettier")," for Javascript)."),(0,i.kt)("p",null,"To setup your local codebase to auto-lint and avoid lint test failures for your PRs, please set up pre-commit for your local repo as such:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pip install pre-commit")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pre-commit install")," to install git hooks (if you see error about ",(0,i.kt)("inlineCode",{parentName:"li"},"git"),", install it into your system)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pre-commit run --all-files")," (optional - run ad-hoc against all files)")),(0,i.kt)("h2",{id:"local-development-mode"},"Local development mode"),(0,i.kt)("p",null,"If you've installed Mephisto via ",(0,i.kt)("inlineCode",{parentName:"p"},"pip install mephisto")," in the past, in order to get python to use your local version of the package, navigate to your ",(0,i.kt)("inlineCode",{parentName:"p"},"Mephisto")," folder and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install -e .\n")),(0,i.kt)("p",null,"This will ensure that your local changes are used in the running version of Mephisto"))}m.isMDXComponent=!0}}]);