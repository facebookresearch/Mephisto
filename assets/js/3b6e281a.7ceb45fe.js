"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[1952],{4127:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var o=t(1987);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return t?o.createElement(f,i(i({ref:n},u),{},{components:t})):o.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7123:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var o=t(9375),r=t(8933),a=(t(1987),t(4127)),i=["components"],l={sidebar_position:2},s="Run VideoAnnotator tasks",c={unversionedId:"guides/how_to_use/video_annotator/running",id:"guides/how_to_use/video_annotator/running",title:"Run VideoAnnotator tasks",description:"To create and launch a VideoAnnotator task, first create your JSON form configuration,",source:"@site/docs/guides/how_to_use/video_annotator/running.md",sourceDirName:"guides/how_to_use/video_annotator",slug:"/guides/how_to_use/video_annotator/running",permalink:"/docs/guides/how_to_use/video_annotator/running",draft:!1,editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/how_to_use/video_annotator/running.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guides",previous:{title:"VideoAnnotator overview",permalink:"/docs/guides/how_to_use/video_annotator/overview"},next:{title:"Config files reference",permalink:"/docs/guides/how_to_use/video_annotator/configuration/config_files"}},u={},d=[{value:"With docker-compose",id:"with-docker-compose",level:4},{value:"Without docker-compose",id:"without-docker-compose",level:4}],p={toc:d};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"run-videoannotator-tasks"},"Run VideoAnnotator tasks"),(0,a.kt)("p",null,"To create and launch a VideoAnnotator task, first create your JSON form configuration,\nand then run the below commands."),(0,a.kt)("p",null,"Once your Task launches, your console will display you URLs like this: ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<YOUR_DOMAIN>/?worker_id=x&assignment_id=1"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If you're doing local testing with ",(0,a.kt)("inlineCode",{parentName:"li"},"local")," architect and ",(0,a.kt)("inlineCode",{parentName:"li"},"inhouse")," provider, your URLs will start with ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:3000/"),". To access your Task units as a worker, just paste one of these URLs into your browser.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"If running with Docker, you will need to replace port ",(0,a.kt)("inlineCode",{parentName:"em"},"3000")," in the console URLs with the remapped port (e.g. for ",(0,a.kt)("inlineCode",{parentName:"em"},"3001:3000")," it will be ",(0,a.kt)("inlineCode",{parentName:"em"},"3001"),").")))),(0,a.kt)("li",{parentName:"ul"},"If you're running with a \"real\" provider, to access your Task units you will need to log into the provider's platform as a worker, and find them there.")),(0,a.kt)("h4",{id:"with-docker-compose"},"With docker-compose"),(0,a.kt)("p",null,"You can launch VideoAnnotator inside a Docker container:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Prepare configs using ",(0,a.kt)("a",{parentName:"li",href:"/docs/guides/how_to_use/video_annotator/configuration/video_annotator_config_command/"},(0,a.kt)("inlineCode",{parentName:"a"},"video_annotator config")," command"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f docker/docker-compose.dev.yml run \\\n    --build \\\n    --rm mephisto_dc \\\n    mephisto video_annotator config --extrapolate-token-sets\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Run annotator itself using ",(0,a.kt)("inlineCode",{parentName:"li"},"video_annotator")," command:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f docker/docker-compose.dev.yml run \\\n    --build \\\n    --publish 8081:8000 \\\n    --publish 3001:3000 \\\n    --rm mephisto_dc \\\n    mephisto video_annotator\n")),(0,a.kt)("h4",{id:"without-docker-compose"},"Without docker-compose"),(0,a.kt)("p",null,"First ensure that mephisto package is installed locally - please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://mephisto.ai/docs/guides/quickstart/"},"Mephisto's main doc"),".\nOnce that is done, run ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/how_to_use/video_annotator/configuration/video_annotator_config_command/"},(0,a.kt)("inlineCode",{parentName:"a"},"video_annotator config")," command")," if needed, followed by ",(0,a.kt)("inlineCode",{parentName:"p"},"video_annotator")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# Configure command (for details, see "video_annotator config command" page)\nmephisto video_annotator config --extrapolate-token-sets\n\n# Run commands\nmephisto video_annotator\nmephisto video_annotator --task-data-config-only\nmephisto video_annotator --conf my-yaml-config\n')),(0,a.kt)("p",null,"where"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-o/--task-data-config-only")," - validate only final data config"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-c/--conf")," - YAML config name (analog of ",(0,a.kt)("inlineCode",{parentName:"li"},"conf")," option in raw python run script)")))}m.isMDXComponent=!0}}]);